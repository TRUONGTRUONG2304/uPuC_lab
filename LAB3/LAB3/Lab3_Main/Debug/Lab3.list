
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e4  080029e4  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080029e4  080029e4  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e4  080029e4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e4  080029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080029ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000034  08002a20  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08002a20  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009497  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aea  00000000  00000000  000294f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002afe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000168e1  00000000  00000000  0002c398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b29c  00000000  00000000  00042c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f94  00000000  00000000  0004df15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfea9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002950  00000000  00000000  000cfefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	080029ac 	.word	0x080029ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	080029ac 	.word	0x080029ac

0800014c <setTimer>:
int realse = 0;
int RED = 0, YELLOW = 0, GREEN = 0;
int timer = 0, flag = 1;
int TIMER_CYCLE_1 = 10;

void setTimer(int duration){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	timer = duration/TIMER_CYCLE_1;
 8000154:	4b07      	ldr	r3, [pc, #28]	; (8000174 <setTimer+0x28>)
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	687a      	ldr	r2, [r7, #4]
 800015a:	fb92 f3f3 	sdiv	r3, r2, r3
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <setTimer+0x2c>)
 8000160:	6013      	str	r3, [r2, #0]
	flag = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	; (800017c <setTimer+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	20000004 	.word	0x20000004
 8000178:	20000064 	.word	0x20000064
 800017c:	20000000 	.word	0x20000000

08000180 <timer_run_proc>:
void timer_run_proc(){
 8000180:	b480      	push	{r7}
 8000182:	af00      	add	r7, sp, #0
	timer--;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <timer_run_proc+0x24>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	3b01      	subs	r3, #1
 800018a:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <timer_run_proc+0x24>)
 800018c:	6013      	str	r3, [r2, #0]
	if(timer <= 0){
 800018e:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <timer_run_proc+0x24>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2b00      	cmp	r3, #0
 8000194:	dc02      	bgt.n	800019c <timer_run_proc+0x1c>
		flag = 1;
 8000196:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <timer_run_proc+0x28>)
 8000198:	2201      	movs	r2, #1
 800019a:	601a      	str	r2, [r3, #0]
	}
}
 800019c:	bf00      	nop
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	20000064 	.word	0x20000064
 80001a8:	20000000 	.word	0x20000000

080001ac <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	switch(mode){
 80001b0:	4bac      	ldr	r3, [pc, #688]	; (8000464 <fsm_for_input_processing+0x2b8>)
 80001b2:	781b      	ldrb	r3, [r3, #0]
 80001b4:	2b03      	cmp	r3, #3
 80001b6:	f200 81e2 	bhi.w	800057e <fsm_for_input_processing+0x3d2>
 80001ba:	a201      	add	r2, pc, #4	; (adr r2, 80001c0 <fsm_for_input_processing+0x14>)
 80001bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c0:	080001d1 	.word	0x080001d1
 80001c4:	08000233 	.word	0x08000233
 80001c8:	0800034b 	.word	0x0800034b
 80001cc:	0800047d 	.word	0x0800047d
	case MODE_FIRST:
		if(!is_button_pressed(BUTTON_FIRST) && !is_button_pressed(BUTTON_SECOND) && !is_button_pressed(BUTTON_THIRD)){
 80001d0:	2000      	movs	r0, #0
 80001d2:	f000 faa5 	bl	8000720 <is_button_pressed>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d10e      	bne.n	80001fa <fsm_for_input_processing+0x4e>
 80001dc:	2001      	movs	r0, #1
 80001de:	f000 fa9f 	bl	8000720 <is_button_pressed>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d108      	bne.n	80001fa <fsm_for_input_processing+0x4e>
 80001e8:	2002      	movs	r0, #2
 80001ea:	f000 fa99 	bl	8000720 <is_button_pressed>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d102      	bne.n	80001fa <fsm_for_input_processing+0x4e>
			realse = 1;
 80001f4:	4b9c      	ldr	r3, [pc, #624]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	601a      	str	r2, [r3, #0]
		}
		if(is_button_pressed(BUTTON_FIRST)){
 80001fa:	2000      	movs	r0, #0
 80001fc:	f000 fa90 	bl	8000720 <is_button_pressed>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	f000 81bd 	beq.w	8000582 <fsm_for_input_processing+0x3d6>
			if(realse == 1) {
 8000208:	4b97      	ldr	r3, [pc, #604]	; (8000468 <fsm_for_input_processing+0x2bc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	2b01      	cmp	r3, #1
 800020e:	f040 81b8 	bne.w	8000582 <fsm_for_input_processing+0x3d6>
				mode = MODE_SECOND;
 8000212:	4b94      	ldr	r3, [pc, #592]	; (8000464 <fsm_for_input_processing+0x2b8>)
 8000214:	2201      	movs	r2, #1
 8000216:	701a      	strb	r2, [r3, #0]
				//set gia tri thoi gian RED thuc te vao RED tam thoi
				RED = 0;
 8000218:	4b94      	ldr	r3, [pc, #592]	; (800046c <fsm_for_input_processing+0x2c0>)
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
				//hien thi thoi gian RED len tren 7seg
				displayCol7SEG(RED);
 800021e:	4b93      	ldr	r3, [pc, #588]	; (800046c <fsm_for_input_processing+0x2c0>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	b2db      	uxtb	r3, r3
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fca5 	bl	8000b74 <displayCol7SEG>
				realse = 0;
 800022a:	4b8f      	ldr	r3, [pc, #572]	; (8000468 <fsm_for_input_processing+0x2bc>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
			}
		}
		break;
 8000230:	e1a7      	b.n	8000582 <fsm_for_input_processing+0x3d6>
	case MODE_SECOND:
		if(!is_button_pressed(BUTTON_FIRST) && !is_button_pressed(BUTTON_SECOND) && !is_button_pressed(BUTTON_THIRD)){
 8000232:	2000      	movs	r0, #0
 8000234:	f000 fa74 	bl	8000720 <is_button_pressed>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d10e      	bne.n	800025c <fsm_for_input_processing+0xb0>
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fa6e 	bl	8000720 <is_button_pressed>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d108      	bne.n	800025c <fsm_for_input_processing+0xb0>
 800024a:	2002      	movs	r0, #2
 800024c:	f000 fa68 	bl	8000720 <is_button_pressed>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d102      	bne.n	800025c <fsm_for_input_processing+0xb0>
			realse = 1;
 8000256:	4b84      	ldr	r3, [pc, #528]	; (8000468 <fsm_for_input_processing+0x2bc>)
 8000258:	2201      	movs	r2, #1
 800025a:	601a      	str	r2, [r3, #0]
		}
		//Chuyen trang thai mode neu button 1 duoc nhan
		if(is_button_pressed(BUTTON_FIRST)){
 800025c:	2000      	movs	r0, #0
 800025e:	f000 fa5f 	bl	8000720 <is_button_pressed>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d012      	beq.n	800028e <fsm_for_input_processing+0xe2>
			if(realse == 1){
 8000268:	4b7f      	ldr	r3, [pc, #508]	; (8000468 <fsm_for_input_processing+0x2bc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d10e      	bne.n	800028e <fsm_for_input_processing+0xe2>
			//chuyen trang thai sang mode 3
				mode = MODE_THIRD;
 8000270:	4b7c      	ldr	r3, [pc, #496]	; (8000464 <fsm_for_input_processing+0x2b8>)
 8000272:	2202      	movs	r2, #2
 8000274:	701a      	strb	r2, [r3, #0]
			//set gia tri thoi gian YELLOW thuc te vao YELLOW tam thoi
				YELLOW = 0;
 8000276:	4b7e      	ldr	r3, [pc, #504]	; (8000470 <fsm_for_input_processing+0x2c4>)
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
		    //hien thi thoi gian YELLOW len tren 7seg
				displayCol7SEG(YELLOW);
 800027c:	4b7c      	ldr	r3, [pc, #496]	; (8000470 <fsm_for_input_processing+0x2c4>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4618      	mov	r0, r3
 8000284:	f000 fc76 	bl	8000b74 <displayCol7SEG>
				realse = 0;
 8000288:	4b77      	ldr	r3, [pc, #476]	; (8000468 <fsm_for_input_processing+0x2bc>)
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
			}
		}
		//neu button 2 duoc nhan
		if(is_button_pressed(BUTTON_SECOND)){
 800028e:	2001      	movs	r0, #1
 8000290:	f000 fa46 	bl	8000720 <is_button_pressed>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d011      	beq.n	80002be <fsm_for_input_processing+0x112>
			if(realse == 1){
 800029a:	4b73      	ldr	r3, [pc, #460]	; (8000468 <fsm_for_input_processing+0x2bc>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d10d      	bne.n	80002be <fsm_for_input_processing+0x112>
			    //tang thoi gian RED tam thoi len 1
			    //hien thi thoi gian RED tam thoi tren 7 SEG
				displayCol7SEG(++RED);
 80002a2:	4b72      	ldr	r3, [pc, #456]	; (800046c <fsm_for_input_processing+0x2c0>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	4a70      	ldr	r2, [pc, #448]	; (800046c <fsm_for_input_processing+0x2c0>)
 80002aa:	6013      	str	r3, [r2, #0]
 80002ac:	4b6f      	ldr	r3, [pc, #444]	; (800046c <fsm_for_input_processing+0x2c0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	b2db      	uxtb	r3, r3
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fc5e 	bl	8000b74 <displayCol7SEG>
				realse = 0;
 80002b8:	4b6b      	ldr	r3, [pc, #428]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
			}
		}
		//neu button 3 duoc nhan
		if(is_button_pressed(BUTTON_THIRD)){
 80002be:	2002      	movs	r0, #2
 80002c0:	f000 fa2e 	bl	8000720 <is_button_pressed>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d00b      	beq.n	80002e2 <fsm_for_input_processing+0x136>
			if(realse == 1){
 80002ca:	4b67      	ldr	r3, [pc, #412]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d107      	bne.n	80002e2 <fsm_for_input_processing+0x136>
			//set thoi gian RED tam thoi cho thoi gian RED thuc te
				setTimerRED(RED);
 80002d2:	4b66      	ldr	r3, [pc, #408]	; (800046c <fsm_for_input_processing+0x2c0>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fe2e 	bl	8000f38 <setTimerRED>
				realse = 0;
 80002dc:	4b62      	ldr	r3, [pc, #392]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
			}
		}
		//Neu button 2 duoc nhan hon 1s thi tang gia tri RED 1 don vi moi 0.5s
		if(is_button_pressed_1s(BUTTON_SECOND)){
 80002e2:	2001      	movs	r0, #1
 80002e4:	f000 fa36 	bl	8000754 <is_button_pressed_1s>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d012      	beq.n	8000314 <fsm_for_input_processing+0x168>
			if(flag == 1){
 80002ee:	4b61      	ldr	r3, [pc, #388]	; (8000474 <fsm_for_input_processing+0x2c8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d10e      	bne.n	8000314 <fsm_for_input_processing+0x168>
				displayCol7SEG(++RED);
 80002f6:	4b5d      	ldr	r3, [pc, #372]	; (800046c <fsm_for_input_processing+0x2c0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3301      	adds	r3, #1
 80002fc:	4a5b      	ldr	r2, [pc, #364]	; (800046c <fsm_for_input_processing+0x2c0>)
 80002fe:	6013      	str	r3, [r2, #0]
 8000300:	4b5a      	ldr	r3, [pc, #360]	; (800046c <fsm_for_input_processing+0x2c0>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fc34 	bl	8000b74 <displayCol7SEG>
				setTimer(500);
 800030c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000310:	f7ff ff1c 	bl	800014c <setTimer>
			}
		}
		//Neu button 2 duoc nhan hon 3s thi tang gia tri RED 1 don vi moi 0.2s
		if(is_button_pressed_3s(BUTTON_SECOND)){
 8000314:	2001      	movs	r0, #1
 8000316:	f000 fa31 	bl	800077c <is_button_pressed_3s>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	f000 8132 	beq.w	8000586 <fsm_for_input_processing+0x3da>
			if(flag == 1){
 8000322:	4b54      	ldr	r3, [pc, #336]	; (8000474 <fsm_for_input_processing+0x2c8>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b01      	cmp	r3, #1
 8000328:	f040 812d 	bne.w	8000586 <fsm_for_input_processing+0x3da>
				displayCol7SEG(++RED);
 800032c:	4b4f      	ldr	r3, [pc, #316]	; (800046c <fsm_for_input_processing+0x2c0>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	4a4e      	ldr	r2, [pc, #312]	; (800046c <fsm_for_input_processing+0x2c0>)
 8000334:	6013      	str	r3, [r2, #0]
 8000336:	4b4d      	ldr	r3, [pc, #308]	; (800046c <fsm_for_input_processing+0x2c0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fc19 	bl	8000b74 <displayCol7SEG>
				setTimer(50);
 8000342:	2032      	movs	r0, #50	; 0x32
 8000344:	f7ff ff02 	bl	800014c <setTimer>
			}
		}
		break;
 8000348:	e11d      	b.n	8000586 <fsm_for_input_processing+0x3da>
	case MODE_THIRD:
		if(!is_button_pressed(BUTTON_FIRST) && !is_button_pressed(BUTTON_SECOND) && !is_button_pressed(BUTTON_THIRD)){
 800034a:	2000      	movs	r0, #0
 800034c:	f000 f9e8 	bl	8000720 <is_button_pressed>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d10e      	bne.n	8000374 <fsm_for_input_processing+0x1c8>
 8000356:	2001      	movs	r0, #1
 8000358:	f000 f9e2 	bl	8000720 <is_button_pressed>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d108      	bne.n	8000374 <fsm_for_input_processing+0x1c8>
 8000362:	2002      	movs	r0, #2
 8000364:	f000 f9dc 	bl	8000720 <is_button_pressed>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <fsm_for_input_processing+0x1c8>
			realse = 1;
 800036e:	4b3e      	ldr	r3, [pc, #248]	; (8000468 <fsm_for_input_processing+0x2bc>)
 8000370:	2201      	movs	r2, #1
 8000372:	601a      	str	r2, [r3, #0]
		}
		//Chuyen trang thai mode neu button 1 duoc nhan
		if(is_button_pressed(BUTTON_FIRST)){
 8000374:	2000      	movs	r0, #0
 8000376:	f000 f9d3 	bl	8000720 <is_button_pressed>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d012      	beq.n	80003a6 <fsm_for_input_processing+0x1fa>
			if(realse == 1){
 8000380:	4b39      	ldr	r3, [pc, #228]	; (8000468 <fsm_for_input_processing+0x2bc>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d10e      	bne.n	80003a6 <fsm_for_input_processing+0x1fa>
			//chuyen trang thai sang mode 4
				mode = MODE_FOURTH;
 8000388:	4b36      	ldr	r3, [pc, #216]	; (8000464 <fsm_for_input_processing+0x2b8>)
 800038a:	2203      	movs	r2, #3
 800038c:	701a      	strb	r2, [r3, #0]
			//set gia tri thoi gian GREEN thuc te vao GREEN tam thoi
				GREEN = 0;
 800038e:	4b3a      	ldr	r3, [pc, #232]	; (8000478 <fsm_for_input_processing+0x2cc>)
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
		    //hien thi thoi gian GREEN len tren 7seg
				displayCol7SEG(GREEN);
 8000394:	4b38      	ldr	r3, [pc, #224]	; (8000478 <fsm_for_input_processing+0x2cc>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4618      	mov	r0, r3
 800039c:	f000 fbea 	bl	8000b74 <displayCol7SEG>
				realse = 0;
 80003a0:	4b31      	ldr	r3, [pc, #196]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
			}
		}
		//neu button 2 duoc nhan
		if(is_button_pressed(BUTTON_SECOND)){
 80003a6:	2001      	movs	r0, #1
 80003a8:	f000 f9ba 	bl	8000720 <is_button_pressed>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d011      	beq.n	80003d6 <fsm_for_input_processing+0x22a>
			if(realse == 1){
 80003b2:	4b2d      	ldr	r3, [pc, #180]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	2b01      	cmp	r3, #1
 80003b8:	d10d      	bne.n	80003d6 <fsm_for_input_processing+0x22a>
			    //tang thoi gian YELLOW tam thoi len 1
			    //hien thi thoi gian YELLOW tam thoi tren 7 SEG
				displayCol7SEG(++YELLOW);
 80003ba:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <fsm_for_input_processing+0x2c4>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	3301      	adds	r3, #1
 80003c0:	4a2b      	ldr	r2, [pc, #172]	; (8000470 <fsm_for_input_processing+0x2c4>)
 80003c2:	6013      	str	r3, [r2, #0]
 80003c4:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <fsm_for_input_processing+0x2c4>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	b2db      	uxtb	r3, r3
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fbd2 	bl	8000b74 <displayCol7SEG>
				realse = 0;
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
			}
		}
		//neu button 3 duoc nhan
		if(is_button_pressed(BUTTON_THIRD)){
 80003d6:	2002      	movs	r0, #2
 80003d8:	f000 f9a2 	bl	8000720 <is_button_pressed>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d00b      	beq.n	80003fa <fsm_for_input_processing+0x24e>
			if(realse == 1){
 80003e2:	4b21      	ldr	r3, [pc, #132]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d107      	bne.n	80003fa <fsm_for_input_processing+0x24e>
			//set thoi gian YELLOW tam thoi cho thoi gian YELLOW thuc te
				setTimerYELLOW(YELLOW);
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <fsm_for_input_processing+0x2c4>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4618      	mov	r0, r3
 80003f0:	f000 fdb2 	bl	8000f58 <setTimerYELLOW>
				realse = 0;
 80003f4:	4b1c      	ldr	r3, [pc, #112]	; (8000468 <fsm_for_input_processing+0x2bc>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
			}
		}
		//Neu button 2 duoc nhan hon 1s thi tang gia tri YELLOW 1 don vi moi 0.5s
		if(is_button_pressed_1s(BUTTON_SECOND)){
 80003fa:	2001      	movs	r0, #1
 80003fc:	f000 f9aa 	bl	8000754 <is_button_pressed_1s>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d012      	beq.n	800042c <fsm_for_input_processing+0x280>
			if(flag == 1){
 8000406:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <fsm_for_input_processing+0x2c8>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d10e      	bne.n	800042c <fsm_for_input_processing+0x280>
				displayCol7SEG(++YELLOW);
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <fsm_for_input_processing+0x2c4>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	3301      	adds	r3, #1
 8000414:	4a16      	ldr	r2, [pc, #88]	; (8000470 <fsm_for_input_processing+0x2c4>)
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	4b15      	ldr	r3, [pc, #84]	; (8000470 <fsm_for_input_processing+0x2c4>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	b2db      	uxtb	r3, r3
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fba8 	bl	8000b74 <displayCol7SEG>
				setTimer(500);
 8000424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000428:	f7ff fe90 	bl	800014c <setTimer>
			}
		}
		//Neu button 2 duoc nhan hon 3s thi tang gia tri RED 1 don vi moi 0.2s
		if(is_button_pressed_3s(BUTTON_SECOND)){
 800042c:	2001      	movs	r0, #1
 800042e:	f000 f9a5 	bl	800077c <is_button_pressed_3s>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	f000 80a8 	beq.w	800058a <fsm_for_input_processing+0x3de>
			if(flag == 1){
 800043a:	4b0e      	ldr	r3, [pc, #56]	; (8000474 <fsm_for_input_processing+0x2c8>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	2b01      	cmp	r3, #1
 8000440:	f040 80a3 	bne.w	800058a <fsm_for_input_processing+0x3de>
				displayCol7SEG(++YELLOW);
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <fsm_for_input_processing+0x2c4>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a09      	ldr	r2, [pc, #36]	; (8000470 <fsm_for_input_processing+0x2c4>)
 800044c:	6013      	str	r3, [r2, #0]
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <fsm_for_input_processing+0x2c4>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	b2db      	uxtb	r3, r3
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fb8d 	bl	8000b74 <displayCol7SEG>
				setTimer(50);
 800045a:	2032      	movs	r0, #50	; 0x32
 800045c:	f7ff fe76 	bl	800014c <setTimer>
			}
		}
		break;
 8000460:	e093      	b.n	800058a <fsm_for_input_processing+0x3de>
 8000462:	bf00      	nop
 8000464:	20000050 	.word	0x20000050
 8000468:	20000054 	.word	0x20000054
 800046c:	20000058 	.word	0x20000058
 8000470:	2000005c 	.word	0x2000005c
 8000474:	20000000 	.word	0x20000000
 8000478:	20000060 	.word	0x20000060
	case MODE_FOURTH:
		if(!is_button_pressed(BUTTON_FIRST) && !is_button_pressed(BUTTON_SECOND) && !is_button_pressed(BUTTON_THIRD)){
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f94f 	bl	8000720 <is_button_pressed>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d10e      	bne.n	80004a6 <fsm_for_input_processing+0x2fa>
 8000488:	2001      	movs	r0, #1
 800048a:	f000 f949 	bl	8000720 <is_button_pressed>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d108      	bne.n	80004a6 <fsm_for_input_processing+0x2fa>
 8000494:	2002      	movs	r0, #2
 8000496:	f000 f943 	bl	8000720 <is_button_pressed>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d102      	bne.n	80004a6 <fsm_for_input_processing+0x2fa>
			realse = 1;
 80004a0:	4b3c      	ldr	r3, [pc, #240]	; (8000594 <fsm_for_input_processing+0x3e8>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	601a      	str	r2, [r3, #0]
		}
		//Chuyen trang thai mode neu button 1 duoc nhan
		if(is_button_pressed(BUTTON_FIRST)){
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 f93a 	bl	8000720 <is_button_pressed>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d009      	beq.n	80004c6 <fsm_for_input_processing+0x31a>
			if(realse == 1){
 80004b2:	4b38      	ldr	r3, [pc, #224]	; (8000594 <fsm_for_input_processing+0x3e8>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2b01      	cmp	r3, #1
 80004b8:	d105      	bne.n	80004c6 <fsm_for_input_processing+0x31a>
			//chuyen trang thai sang mode 1
				mode = MODE_FIRST;
 80004ba:	4b37      	ldr	r3, [pc, #220]	; (8000598 <fsm_for_input_processing+0x3ec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	701a      	strb	r2, [r3, #0]
				realse = 0;
 80004c0:	4b34      	ldr	r3, [pc, #208]	; (8000594 <fsm_for_input_processing+0x3e8>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
			}
		}
		//neu button 2 duoc nhan
		if(is_button_pressed(BUTTON_SECOND)){
 80004c6:	2001      	movs	r0, #1
 80004c8:	f000 f92a 	bl	8000720 <is_button_pressed>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d011      	beq.n	80004f6 <fsm_for_input_processing+0x34a>
			if(realse == 1){
 80004d2:	4b30      	ldr	r3, [pc, #192]	; (8000594 <fsm_for_input_processing+0x3e8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d10d      	bne.n	80004f6 <fsm_for_input_processing+0x34a>
			    //tang thoi gian GREEN tam thoi len 1
			    //hien thi thoi gian GREEN tam thoi tren 7 SEG
				displayCol7SEG(++GREEN);
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <fsm_for_input_processing+0x3f0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	3301      	adds	r3, #1
 80004e0:	4a2e      	ldr	r2, [pc, #184]	; (800059c <fsm_for_input_processing+0x3f0>)
 80004e2:	6013      	str	r3, [r2, #0]
 80004e4:	4b2d      	ldr	r3, [pc, #180]	; (800059c <fsm_for_input_processing+0x3f0>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fb42 	bl	8000b74 <displayCol7SEG>
				realse = 0;
 80004f0:	4b28      	ldr	r3, [pc, #160]	; (8000594 <fsm_for_input_processing+0x3e8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
			}
		}
		//neu button 3 duoc nhan
		if(is_button_pressed(BUTTON_THIRD)){
 80004f6:	2002      	movs	r0, #2
 80004f8:	f000 f912 	bl	8000720 <is_button_pressed>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d00b      	beq.n	800051a <fsm_for_input_processing+0x36e>
			if(realse == 1){
 8000502:	4b24      	ldr	r3, [pc, #144]	; (8000594 <fsm_for_input_processing+0x3e8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d107      	bne.n	800051a <fsm_for_input_processing+0x36e>
			//set thoi gian GREEN tam thoi cho thoi gian GREEN thuc te
				setTimerGREEN(GREEN);
 800050a:	4b24      	ldr	r3, [pc, #144]	; (800059c <fsm_for_input_processing+0x3f0>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fd32 	bl	8000f78 <setTimerGREEN>
				realse = 0;
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <fsm_for_input_processing+0x3e8>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
			}
		}
		//Neu button 2 duoc nhan hon 1s thi tang gia tri GREEN 1 don vi moi 0.5s
		if(is_button_pressed_1s(BUTTON_SECOND)){
 800051a:	2001      	movs	r0, #1
 800051c:	f000 f91a 	bl	8000754 <is_button_pressed_1s>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d012      	beq.n	800054c <fsm_for_input_processing+0x3a0>
			if(flag == 1){
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <fsm_for_input_processing+0x3f4>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b01      	cmp	r3, #1
 800052c:	d10e      	bne.n	800054c <fsm_for_input_processing+0x3a0>
				displayCol7SEG(++GREEN);
 800052e:	4b1b      	ldr	r3, [pc, #108]	; (800059c <fsm_for_input_processing+0x3f0>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	4a19      	ldr	r2, [pc, #100]	; (800059c <fsm_for_input_processing+0x3f0>)
 8000536:	6013      	str	r3, [r2, #0]
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <fsm_for_input_processing+0x3f0>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f000 fb18 	bl	8000b74 <displayCol7SEG>
				setTimer(500);
 8000544:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000548:	f7ff fe00 	bl	800014c <setTimer>
			}
		}
		//Neu button 2 duoc nhan hon 3s thi tang gia tri GREEN 1 don vi moi 0.2s
		if(is_button_pressed_3s(BUTTON_SECOND)){
 800054c:	2001      	movs	r0, #1
 800054e:	f000 f915 	bl	800077c <is_button_pressed_3s>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d01a      	beq.n	800058e <fsm_for_input_processing+0x3e2>
			if(flag == 1){
 8000558:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <fsm_for_input_processing+0x3f4>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d116      	bne.n	800058e <fsm_for_input_processing+0x3e2>
				displayCol7SEG(++GREEN);
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <fsm_for_input_processing+0x3f0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3301      	adds	r3, #1
 8000566:	4a0d      	ldr	r2, [pc, #52]	; (800059c <fsm_for_input_processing+0x3f0>)
 8000568:	6013      	str	r3, [r2, #0]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <fsm_for_input_processing+0x3f0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4618      	mov	r0, r3
 8000572:	f000 faff 	bl	8000b74 <displayCol7SEG>
				setTimer(50);
 8000576:	2032      	movs	r0, #50	; 0x32
 8000578:	f7ff fde8 	bl	800014c <setTimer>
			}
		}
		break;
 800057c:	e007      	b.n	800058e <fsm_for_input_processing+0x3e2>
	default:
		break;
 800057e:	bf00      	nop
 8000580:	e006      	b.n	8000590 <fsm_for_input_processing+0x3e4>
		break;
 8000582:	bf00      	nop
 8000584:	e004      	b.n	8000590 <fsm_for_input_processing+0x3e4>
		break;
 8000586:	bf00      	nop
 8000588:	e002      	b.n	8000590 <fsm_for_input_processing+0x3e4>
		break;
 800058a:	bf00      	nop
 800058c:	e000      	b.n	8000590 <fsm_for_input_processing+0x3e4>
		break;
 800058e:	bf00      	nop
	}
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000054 	.word	0x20000054
 8000598:	20000050 	.word	0x20000050
 800059c:	20000060 	.word	0x20000060
 80005a0:	20000000 	.word	0x20000000

080005a4 <getMode>:
int getMode(){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	return mode;
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <getMode+0x10>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000050 	.word	0x20000050

080005b8 <button_reading>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];

static uint16_t counterForButtonPress3s[NO_OF_BUTTONS];
static uint8_t flagForButtonPress3s[NO_OF_BUTTONS];

void button_reading(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	e093      	b.n	80006ec <button_reading+0x134>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 80005c4:	4a4e      	ldr	r2, [pc, #312]	; (8000700 <button_reading+0x148>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4413      	add	r3, r2
 80005ca:	7819      	ldrb	r1, [r3, #0]
 80005cc:	4a4d      	ldr	r2, [pc, #308]	; (8000704 <button_reading+0x14c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	460a      	mov	r2, r1
 80005d4:	701a      	strb	r2, [r3, #0]
		switch(i){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d021      	beq.n	8000620 <button_reading+0x68>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b02      	cmp	r3, #2
 80005e0:	dc2a      	bgt.n	8000638 <button_reading+0x80>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d003      	beq.n	80005f0 <button_reading+0x38>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d00c      	beq.n	8000608 <button_reading+0x50>
 80005ee:	e023      	b.n	8000638 <button_reading+0x80>
		case 0:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, FIRST_BUTTON);
 80005f0:	2101      	movs	r1, #1
 80005f2:	4845      	ldr	r0, [pc, #276]	; (8000708 <button_reading+0x150>)
 80005f4:	f001 f9b2 	bl	800195c <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	4619      	mov	r1, r3
 80005fc:	4a40      	ldr	r2, [pc, #256]	; (8000700 <button_reading+0x148>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	460a      	mov	r2, r1
 8000604:	701a      	strb	r2, [r3, #0]
			break;
 8000606:	e017      	b.n	8000638 <button_reading+0x80>
		case 1:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, SECOND_BUTTON);
 8000608:	2102      	movs	r1, #2
 800060a:	483f      	ldr	r0, [pc, #252]	; (8000708 <button_reading+0x150>)
 800060c:	f001 f9a6 	bl	800195c <HAL_GPIO_ReadPin>
 8000610:	4603      	mov	r3, r0
 8000612:	4619      	mov	r1, r3
 8000614:	4a3a      	ldr	r2, [pc, #232]	; (8000700 <button_reading+0x148>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	460a      	mov	r2, r1
 800061c:	701a      	strb	r2, [r3, #0]
			break;
 800061e:	e00b      	b.n	8000638 <button_reading+0x80>
		case 2:
			debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOB, THIRD_BUTTON);
 8000620:	2104      	movs	r1, #4
 8000622:	4839      	ldr	r0, [pc, #228]	; (8000708 <button_reading+0x150>)
 8000624:	f001 f99a 	bl	800195c <HAL_GPIO_ReadPin>
 8000628:	4603      	mov	r3, r0
 800062a:	4619      	mov	r1, r3
 800062c:	4a34      	ldr	r2, [pc, #208]	; (8000700 <button_reading+0x148>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4413      	add	r3, r2
 8000632:	460a      	mov	r2, r1
 8000634:	701a      	strb	r2, [r3, #0]
			break;
 8000636:	bf00      	nop
		}
		if(debounceButtonBuffer1[i] == debounceButtonBuffer2[i]){
 8000638:	4a31      	ldr	r2, [pc, #196]	; (8000700 <button_reading+0x148>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	4413      	add	r3, r2
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4930      	ldr	r1, [pc, #192]	; (8000704 <button_reading+0x14c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	440b      	add	r3, r1
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	429a      	cmp	r2, r3
 800064a:	d14c      	bne.n	80006e6 <button_reading+0x12e>
				buttonBuffer[i] = debounceButtonBuffer1[i];
 800064c:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <button_reading+0x148>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	7819      	ldrb	r1, [r3, #0]
 8000654:	4a2d      	ldr	r2, [pc, #180]	; (800070c <button_reading+0x154>)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4413      	add	r3, r2
 800065a:	460a      	mov	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 800065e:	4a2b      	ldr	r2, [pc, #172]	; (800070c <button_reading+0x154>)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d129      	bne.n	80006be <button_reading+0x106>
					if(counterForButtonPress1s[1] < DURATION_FOR_1s){
 800066a:	4b29      	ldr	r3, [pc, #164]	; (8000710 <button_reading+0x158>)
 800066c:	885b      	ldrh	r3, [r3, #2]
 800066e:	2b63      	cmp	r3, #99	; 0x63
 8000670:	d80a      	bhi.n	8000688 <button_reading+0xd0>
						counterForButtonPress1s[i]++;
 8000672:	4a27      	ldr	r2, [pc, #156]	; (8000710 <button_reading+0x158>)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800067a:	3301      	adds	r3, #1
 800067c:	b299      	uxth	r1, r3
 800067e:	4a24      	ldr	r2, [pc, #144]	; (8000710 <button_reading+0x158>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000686:	e004      	b.n	8000692 <button_reading+0xda>
					}
					else{
						flagForButtonPress1s[i] = 1;
 8000688:	4a22      	ldr	r2, [pc, #136]	; (8000714 <button_reading+0x15c>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
					}
					if(counterForButtonPress3s[1] < DURATION_FOR_3s){
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <button_reading+0x160>)
 8000694:	885b      	ldrh	r3, [r3, #2]
 8000696:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800069a:	d20a      	bcs.n	80006b2 <button_reading+0xfa>
						counterForButtonPress1s[i]++;
 800069c:	4a1c      	ldr	r2, [pc, #112]	; (8000710 <button_reading+0x158>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b299      	uxth	r1, r3
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <button_reading+0x158>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80006b0:	e019      	b.n	80006e6 <button_reading+0x12e>
					}
					else{
						flagForButtonPress3s[i] = 1;
 80006b2:	4a1a      	ldr	r2, [pc, #104]	; (800071c <button_reading+0x164>)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	2201      	movs	r2, #1
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e013      	b.n	80006e6 <button_reading+0x12e>
					}
				}
				else{
					counterForButtonPress1s[i] = 0;
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <button_reading+0x158>)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2100      	movs	r1, #0
 80006c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress1s[i] = 0;
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <button_reading+0x15c>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
					counterForButtonPress3s[i] = 0;
 80006d2:	4a11      	ldr	r2, [pc, #68]	; (8000718 <button_reading+0x160>)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2100      	movs	r1, #0
 80006d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					flagForButtonPress3s[i] = 0;
 80006dc:	4a0f      	ldr	r2, [pc, #60]	; (800071c <button_reading+0x164>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < NO_OF_BUTTONS; i++){
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	f77f af68 	ble.w	80005c4 <button_reading+0xc>
				}
		}
	}
}
 80006f4:	bf00      	nop
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	2000006c 	.word	0x2000006c
 8000704:	20000070 	.word	0x20000070
 8000708:	40010c00 	.word	0x40010c00
 800070c:	20000068 	.word	0x20000068
 8000710:	20000074 	.word	0x20000074
 8000714:	2000007c 	.word	0x2000007c
 8000718:	20000080 	.word	0x20000080
 800071c:	20000088 	.word	0x20000088

08000720 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b02      	cmp	r3, #2
 800072e:	d901      	bls.n	8000734 <is_button_pressed+0x14>
 8000730:	2300      	movs	r3, #0
 8000732:	e007      	b.n	8000744 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED)?1:0;
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4a06      	ldr	r2, [pc, #24]	; (8000750 <is_button_pressed+0x30>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	bf0c      	ite	eq
 800073e:	2301      	moveq	r3, #1
 8000740:	2300      	movne	r3, #0
 8000742:	b2db      	uxtb	r3, r3
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000068 	.word	0x20000068

08000754 <is_button_pressed_1s>:
unsigned char is_button_pressed_1s(uint8_t index){
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b02      	cmp	r3, #2
 8000762:	d901      	bls.n	8000768 <is_button_pressed_1s+0x14>
 8000764:	2300      	movs	r3, #0
 8000766:	e002      	b.n	800076e <is_button_pressed_1s+0x1a>
	return flagForButtonPress1s[index];;
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	4a03      	ldr	r2, [pc, #12]	; (8000778 <is_button_pressed_1s+0x24>)
 800076c:	5cd3      	ldrb	r3, [r2, r3]
}
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	2000007c 	.word	0x2000007c

0800077c <is_button_pressed_3s>:
unsigned char is_button_pressed_3s(uint8_t index){
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	2b02      	cmp	r3, #2
 800078a:	d901      	bls.n	8000790 <is_button_pressed_3s+0x14>
 800078c:	2300      	movs	r3, #0
 800078e:	e002      	b.n	8000796 <is_button_pressed_3s+0x1a>
	return flagForButtonPress3s[index];
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <is_button_pressed_3s+0x24>)
 8000794:	5cd3      	ldrb	r3, [r2, r3]
}
 8000796:	4618      	mov	r0, r3
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	20000088 	.word	0x20000088

080007a4 <setTimer2Hz>:
int blink = 0;

enum ModeState{MODE_FIRST, MODE_SECOND, MODE_THIRD, MODE_FOURTH};
enum lightTraffic{RED, YELLOW, GREEN, OFF};
//set timer with f = 2Hz
void setTimer2Hz(){
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
	int duration = 1000/FREQUENCE_BLINK_LED;
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <setTimer2Hz+0x3c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b6:	607b      	str	r3, [r7, #4]
	duration = duration/2;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	0fda      	lsrs	r2, r3, #31
 80007bc:	4413      	add	r3, r2
 80007be:	105b      	asrs	r3, r3, #1
 80007c0:	607b      	str	r3, [r7, #4]
	timer_counter = duration/TIMER_CYCLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <setTimer2Hz+0x40>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <setTimer2Hz+0x44>)
 80007ce:	6013      	str	r3, [r2, #0]
	flag_timer0 = 0;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <setTimer2Hz+0x48>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	2000000c 	.word	0x2000000c
 80007e4:	20000008 	.word	0x20000008
 80007e8:	20000090 	.word	0x20000090
 80007ec:	2000008c 	.word	0x2000008c

080007f0 <setTimer0>:
void setTimer0(int duration){
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	timer_counter = duration/TIMER_CYCLE;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <setTimer0+0x28>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	687a      	ldr	r2, [r7, #4]
 80007fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000802:	4a06      	ldr	r2, [pc, #24]	; (800081c <setTimer0+0x2c>)
 8000804:	6013      	str	r3, [r2, #0]
	flag_timer0 = 0;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <setTimer0+0x30>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000008 	.word	0x20000008
 800081c:	20000090 	.word	0x20000090
 8000820:	2000008c 	.word	0x2000008c

08000824 <timer_run>:
void timer_run(){
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
	timer_counter--;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <timer_run+0x24>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3b01      	subs	r3, #1
 800082e:	4a06      	ldr	r2, [pc, #24]	; (8000848 <timer_run+0x24>)
 8000830:	6013      	str	r3, [r2, #0]
	if(timer_counter <= 0){
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <timer_run+0x24>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	dc02      	bgt.n	8000840 <timer_run+0x1c>
		flag_timer0 = 1;
 800083a:	4b04      	ldr	r3, [pc, #16]	; (800084c <timer_run+0x28>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
	}
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	20000090 	.word	0x20000090
 800084c:	2000008c 	.word	0x2000008c

08000850 <display12LED>:
void display12LED(int row, int col){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b03      	cmp	r3, #3
 800085e:	d84b      	bhi.n	80008f8 <display12LED+0xa8>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <display12LED+0x18>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	08000879 	.word	0x08000879
 800086c:	08000899 	.word	0x08000899
 8000870:	080008b9 	.word	0x080008b9
 8000874:	080008d9 	.word	0x080008d9
	switch(row){
	case RED: // RED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000878:	2200      	movs	r2, #0
 800087a:	2110      	movs	r1, #16
 800087c:	4847      	ldr	r0, [pc, #284]	; (800099c <display12LED+0x14c>)
 800087e:	f001 f884 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8000882:	2201      	movs	r2, #1
 8000884:	2120      	movs	r1, #32
 8000886:	4845      	ldr	r0, [pc, #276]	; (800099c <display12LED+0x14c>)
 8000888:	f001 f87f 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4842      	ldr	r0, [pc, #264]	; (800099c <display12LED+0x14c>)
 8000892:	f001 f87a 	bl	800198a <HAL_GPIO_WritePin>
		break;
 8000896:	e02f      	b.n	80008f8 <display12LED+0xa8>
	case YELLOW: // YELLOW
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	483f      	ldr	r0, [pc, #252]	; (800099c <display12LED+0x14c>)
 800089e:	f001 f874 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	483d      	ldr	r0, [pc, #244]	; (800099c <display12LED+0x14c>)
 80008a8:	f001 f86f 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2140      	movs	r1, #64	; 0x40
 80008b0:	483a      	ldr	r0, [pc, #232]	; (800099c <display12LED+0x14c>)
 80008b2:	f001 f86a 	bl	800198a <HAL_GPIO_WritePin>
		break;
 80008b6:	e01f      	b.n	80008f8 <display12LED+0xa8>
	case GREEN: // GREEN
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80008b8:	2201      	movs	r2, #1
 80008ba:	2110      	movs	r1, #16
 80008bc:	4837      	ldr	r0, [pc, #220]	; (800099c <display12LED+0x14c>)
 80008be:	f001 f864 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80008c2:	2201      	movs	r2, #1
 80008c4:	2120      	movs	r1, #32
 80008c6:	4835      	ldr	r0, [pc, #212]	; (800099c <display12LED+0x14c>)
 80008c8:	f001 f85f 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4832      	ldr	r0, [pc, #200]	; (800099c <display12LED+0x14c>)
 80008d2:	f001 f85a 	bl	800198a <HAL_GPIO_WritePin>
		break;
 80008d6:	e00f      	b.n	80008f8 <display12LED+0xa8>
	case OFF:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	482f      	ldr	r0, [pc, #188]	; (800099c <display12LED+0x14c>)
 80008de:	f001 f854 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2120      	movs	r1, #32
 80008e6:	482d      	ldr	r0, [pc, #180]	; (800099c <display12LED+0x14c>)
 80008e8:	f001 f84f 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2140      	movs	r1, #64	; 0x40
 80008f0:	482a      	ldr	r0, [pc, #168]	; (800099c <display12LED+0x14c>)
 80008f2:	f001 f84a 	bl	800198a <HAL_GPIO_WritePin>
		break;
 80008f6:	bf00      	nop
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d84a      	bhi.n	8000994 <display12LED+0x144>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <display12LED+0xb4>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	08000915 	.word	0x08000915
 8000908:	08000935 	.word	0x08000935
 800090c:	08000955 	.word	0x08000955
 8000910:	08000975 	.word	0x08000975
	}
	switch(col){
	case RED: // RED
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2102      	movs	r1, #2
 8000918:	4820      	ldr	r0, [pc, #128]	; (800099c <display12LED+0x14c>)
 800091a:	f001 f836 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800091e:	2201      	movs	r2, #1
 8000920:	2104      	movs	r1, #4
 8000922:	481e      	ldr	r0, [pc, #120]	; (800099c <display12LED+0x14c>)
 8000924:	f001 f831 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000928:	2201      	movs	r2, #1
 800092a:	2108      	movs	r1, #8
 800092c:	481b      	ldr	r0, [pc, #108]	; (800099c <display12LED+0x14c>)
 800092e:	f001 f82c 	bl	800198a <HAL_GPIO_WritePin>
		break;
 8000932:	e02f      	b.n	8000994 <display12LED+0x144>
	case YELLOW: // YELLOW
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000934:	2201      	movs	r2, #1
 8000936:	2102      	movs	r1, #2
 8000938:	4818      	ldr	r0, [pc, #96]	; (800099c <display12LED+0x14c>)
 800093a:	f001 f826 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2104      	movs	r1, #4
 8000942:	4816      	ldr	r0, [pc, #88]	; (800099c <display12LED+0x14c>)
 8000944:	f001 f821 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000948:	2201      	movs	r2, #1
 800094a:	2108      	movs	r1, #8
 800094c:	4813      	ldr	r0, [pc, #76]	; (800099c <display12LED+0x14c>)
 800094e:	f001 f81c 	bl	800198a <HAL_GPIO_WritePin>
		break;
 8000952:	e01f      	b.n	8000994 <display12LED+0x144>
	case GREEN: // GREEN
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000954:	2201      	movs	r2, #1
 8000956:	2102      	movs	r1, #2
 8000958:	4810      	ldr	r0, [pc, #64]	; (800099c <display12LED+0x14c>)
 800095a:	f001 f816 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800095e:	2201      	movs	r2, #1
 8000960:	2104      	movs	r1, #4
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <display12LED+0x14c>)
 8000964:	f001 f811 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2108      	movs	r1, #8
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <display12LED+0x14c>)
 800096e:	f001 f80c 	bl	800198a <HAL_GPIO_WritePin>
		break;
 8000972:	e00f      	b.n	8000994 <display12LED+0x144>
	case OFF:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 1);
 8000974:	2201      	movs	r2, #1
 8000976:	2102      	movs	r1, #2
 8000978:	4808      	ldr	r0, [pc, #32]	; (800099c <display12LED+0x14c>)
 800097a:	f001 f806 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 800097e:	2201      	movs	r2, #1
 8000980:	2104      	movs	r1, #4
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <display12LED+0x14c>)
 8000984:	f001 f801 	bl	800198a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	2108      	movs	r1, #8
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <display12LED+0x14c>)
 800098e:	f000 fffc 	bl	800198a <HAL_GPIO_WritePin>
		break;
 8000992:	bf00      	nop
	}

}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40010800 	.word	0x40010800

080009a0 <blinkRedLED>:
void blinkRedLED(){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	if(flag_timer0){
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <blinkRedLED+0x3c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d014      	beq.n	80009d6 <blinkRedLED+0x36>
		if(!blink) {
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <blinkRedLED+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d107      	bne.n	80009c4 <blinkRedLED+0x24>
			display12LED(RED, RED);
 80009b4:	2100      	movs	r1, #0
 80009b6:	2000      	movs	r0, #0
 80009b8:	f7ff ff4a 	bl	8000850 <display12LED>
			blink = 1;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <blinkRedLED+0x40>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e006      	b.n	80009d2 <blinkRedLED+0x32>
		}
		else {
			display12LED(OFF, OFF);
 80009c4:	2103      	movs	r1, #3
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff ff42 	bl	8000850 <display12LED>
			blink = 0;
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <blinkRedLED+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
		}
		setTimer2Hz();
 80009d2:	f7ff fee7 	bl	80007a4 <setTimer2Hz>
	}
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	20000098 	.word	0x20000098

080009e4 <blinkYellowLED>:
void blinkYellowLED(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if(flag_timer0){
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <blinkYellowLED+0x3c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d014      	beq.n	8000a1a <blinkYellowLED+0x36>
		if(!blink) {
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <blinkYellowLED+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d107      	bne.n	8000a08 <blinkYellowLED+0x24>
			display12LED(YELLOW, YELLOW);
 80009f8:	2101      	movs	r1, #1
 80009fa:	2001      	movs	r0, #1
 80009fc:	f7ff ff28 	bl	8000850 <display12LED>
			blink = 1;
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <blinkYellowLED+0x40>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e006      	b.n	8000a16 <blinkYellowLED+0x32>
		}
		else {
			display12LED(OFF, OFF);
 8000a08:	2103      	movs	r1, #3
 8000a0a:	2003      	movs	r0, #3
 8000a0c:	f7ff ff20 	bl	8000850 <display12LED>
			blink = 0;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <blinkYellowLED+0x40>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		}
		setTimer2Hz();
 8000a16:	f7ff fec5 	bl	80007a4 <setTimer2Hz>
	}
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000008c 	.word	0x2000008c
 8000a24:	20000098 	.word	0x20000098

08000a28 <blinkGreenLED>:
void blinkGreenLED(){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	if(flag_timer0){
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <blinkGreenLED+0x3c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d014      	beq.n	8000a5e <blinkGreenLED+0x36>
		if(!blink) {
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <blinkGreenLED+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <blinkGreenLED+0x24>
			display12LED(GREEN, GREEN);
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f7ff ff06 	bl	8000850 <display12LED>
			blink = 1;
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <blinkGreenLED+0x40>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e006      	b.n	8000a5a <blinkGreenLED+0x32>
		}
		else {
			display12LED(OFF, OFF);
 8000a4c:	2103      	movs	r1, #3
 8000a4e:	2003      	movs	r0, #3
 8000a50:	f7ff fefe 	bl	8000850 <display12LED>
			blink = 0;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <blinkGreenLED+0x40>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
		}
		setTimer2Hz();
 8000a5a:	f7ff fea3 	bl	80007a4 <setTimer2Hz>
	}
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000008c 	.word	0x2000008c
 8000a68:	20000098 	.word	0x20000098

08000a6c <displayRow7SEG>:
void displayRow7SEG(uint8_t num){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	uint8_t unit = num%10;
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <displayRow7SEG+0x100>)
 8000a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a7e:	08d9      	lsrs	r1, r3, #3
 8000a80:	460b      	mov	r3, r1
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	440b      	add	r3, r1
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	73fb      	strb	r3, [r7, #15]
	uint8_t dozen = (num/10)%10;
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	4a37      	ldr	r2, [pc, #220]	; (8000b6c <displayRow7SEG+0x100>)
 8000a90:	fba2 2303 	umull	r2, r3, r2, r3
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b34      	ldr	r3, [pc, #208]	; (8000b6c <displayRow7SEG+0x100>)
 8000a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000a9e:	08d9      	lsrs	r1, r3, #3
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	440b      	add	r3, r1
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, ((unit>>0)&0x01));
 8000aac:	7bfb      	ldrb	r3, [r7, #15]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aba:	482d      	ldr	r0, [pc, #180]	; (8000b70 <displayRow7SEG+0x104>)
 8000abc:	f000 ff65 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, ((unit>>1)&0x01));
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	f003 0301 	and.w	r3, r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	461a      	mov	r2, r3
 8000ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad2:	4827      	ldr	r0, [pc, #156]	; (8000b70 <displayRow7SEG+0x104>)
 8000ad4:	f000 ff59 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, ((unit>>2)&0x01));
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <displayRow7SEG+0x104>)
 8000aec:	f000 ff4d 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, ((unit>>3)&0x01));
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	461a      	mov	r2, r3
 8000afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b02:	481b      	ldr	r0, [pc, #108]	; (8000b70 <displayRow7SEG+0x104>)
 8000b04:	f000 ff41 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, ((dozen>>0)&0x01));
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	461a      	mov	r2, r3
 8000b12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b16:	4816      	ldr	r0, [pc, #88]	; (8000b70 <displayRow7SEG+0x104>)
 8000b18:	f000 ff37 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, ((dozen>>1)&0x01));
 8000b1c:	7bbb      	ldrb	r3, [r7, #14]
 8000b1e:	085b      	lsrs	r3, r3, #1
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <displayRow7SEG+0x104>)
 8000b30:	f000 ff2b 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, ((dozen>>2)&0x01));
 8000b34:	7bbb      	ldrb	r3, [r7, #14]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	461a      	mov	r2, r3
 8000b42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <displayRow7SEG+0x104>)
 8000b48:	f000 ff1f 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, ((dozen>>3)&0x01));
 8000b4c:	7bbb      	ldrb	r3, [r7, #14]
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	461a      	mov	r2, r3
 8000b5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5e:	4804      	ldr	r0, [pc, #16]	; (8000b70 <displayRow7SEG+0x104>)
 8000b60:	f000 ff13 	bl	800198a <HAL_GPIO_WritePin>
}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	cccccccd 	.word	0xcccccccd
 8000b70:	40010800 	.word	0x40010800

08000b74 <displayCol7SEG>:
void displayCol7SEG(uint8_t num){
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t unit = num%10;
 8000b7e:	79fa      	ldrb	r2, [r7, #7]
 8000b80:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <displayCol7SEG+0xfc>)
 8000b82:	fba3 1302 	umull	r1, r3, r3, r2
 8000b86:	08d9      	lsrs	r1, r3, #3
 8000b88:	460b      	mov	r3, r1
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	73fb      	strb	r3, [r7, #15]
	uint8_t dozen = (num/10)%10;
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	4a36      	ldr	r2, [pc, #216]	; (8000c70 <displayCol7SEG+0xfc>)
 8000b98:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9c:	08db      	lsrs	r3, r3, #3
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b33      	ldr	r3, [pc, #204]	; (8000c70 <displayCol7SEG+0xfc>)
 8000ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba6:	08d9      	lsrs	r1, r3, #3
 8000ba8:	460b      	mov	r3, r1
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	440b      	add	r3, r1
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	73bb      	strb	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, ((unit>>0)&0x01));
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	482c      	ldr	r0, [pc, #176]	; (8000c74 <displayCol7SEG+0x100>)
 8000bc2:	f000 fee2 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, ((unit>>1)&0x01));
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	085b      	lsrs	r3, r3, #1
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	2140      	movs	r1, #64	; 0x40
 8000bd6:	4827      	ldr	r0, [pc, #156]	; (8000c74 <displayCol7SEG+0x100>)
 8000bd8:	f000 fed7 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, ((unit>>2)&0x01));
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	461a      	mov	r2, r3
 8000bea:	2180      	movs	r1, #128	; 0x80
 8000bec:	4821      	ldr	r0, [pc, #132]	; (8000c74 <displayCol7SEG+0x100>)
 8000bee:	f000 fecc 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, ((unit>>3)&0x01));
 8000bf2:	7bfb      	ldrb	r3, [r7, #15]
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	461a      	mov	r2, r3
 8000c00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c04:	481b      	ldr	r0, [pc, #108]	; (8000c74 <displayCol7SEG+0x100>)
 8000c06:	f000 fec0 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, ((dozen>>0)&0x01));
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	f003 0301 	and.w	r3, r3, #1
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	4816      	ldr	r0, [pc, #88]	; (8000c74 <displayCol7SEG+0x100>)
 8000c1a:	f000 feb6 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, ((dozen>>1)&0x01));
 8000c1e:	7bbb      	ldrb	r3, [r7, #14]
 8000c20:	085b      	lsrs	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <displayCol7SEG+0x100>)
 8000c32:	f000 feaa 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, ((dozen>>2)&0x01));
 8000c36:	7bbb      	ldrb	r3, [r7, #14]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c48:	480a      	ldr	r0, [pc, #40]	; (8000c74 <displayCol7SEG+0x100>)
 8000c4a:	f000 fe9e 	bl	800198a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, ((dozen>>3)&0x01));
 8000c4e:	7bbb      	ldrb	r3, [r7, #14]
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <displayCol7SEG+0x100>)
 8000c62:	f000 fe92 	bl	800198a <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	cccccccd 	.word	0xcccccccd
 8000c74:	40010c00 	.word	0x40010c00

08000c78 <trafficLight>:
void trafficLight(){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	  if(flag_timer0){
 8000c7c:	4b5e      	ldr	r3, [pc, #376]	; (8000df8 <trafficLight+0x180>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 80b6 	beq.w	8000df2 <trafficLight+0x17a>
	  display12LED(flagRow, flagCol);
 8000c86:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <trafficLight+0x184>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a5d      	ldr	r2, [pc, #372]	; (8000e00 <trafficLight+0x188>)
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fddd 	bl	8000850 <display12LED>
	  switch(flagRow){
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <trafficLight+0x184>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d034      	beq.n	8000d08 <trafficLight+0x90>
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	dc4e      	bgt.n	8000d40 <trafficLight+0xc8>
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d002      	beq.n	8000cac <trafficLight+0x34>
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d017      	beq.n	8000cda <trafficLight+0x62>
 8000caa:	e049      	b.n	8000d40 <trafficLight+0xc8>
		  case RED:
			  TIMER_ROW--;
 8000cac:	4b55      	ldr	r3, [pc, #340]	; (8000e04 <trafficLight+0x18c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	4a54      	ldr	r2, [pc, #336]	; (8000e04 <trafficLight+0x18c>)
 8000cb4:	6013      	str	r3, [r2, #0]
			  displayRow7SEG(TIMER_ROW);
 8000cb6:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <trafficLight+0x18c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fed5 	bl	8000a6c <displayRow7SEG>
			  if(TIMER_ROW == 0){
 8000cc2:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <trafficLight+0x18c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d135      	bne.n	8000d36 <trafficLight+0xbe>
				  flagRow = 2;
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <trafficLight+0x184>)
 8000ccc:	2202      	movs	r2, #2
 8000cce:	601a      	str	r2, [r3, #0]
				  TIMER_ROW = GREEN_TIMER;
 8000cd0:	4b4d      	ldr	r3, [pc, #308]	; (8000e08 <trafficLight+0x190>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a4b      	ldr	r2, [pc, #300]	; (8000e04 <trafficLight+0x18c>)
 8000cd6:	6013      	str	r3, [r2, #0]
			  }
			  break;
 8000cd8:	e02d      	b.n	8000d36 <trafficLight+0xbe>
		  case YELLOW:
			  TIMER_ROW--;
 8000cda:	4b4a      	ldr	r3, [pc, #296]	; (8000e04 <trafficLight+0x18c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	4a48      	ldr	r2, [pc, #288]	; (8000e04 <trafficLight+0x18c>)
 8000ce2:	6013      	str	r3, [r2, #0]
			  displayRow7SEG(TIMER_ROW);
 8000ce4:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <trafficLight+0x18c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff febe 	bl	8000a6c <displayRow7SEG>
			  if(TIMER_ROW == 0){
 8000cf0:	4b44      	ldr	r3, [pc, #272]	; (8000e04 <trafficLight+0x18c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d120      	bne.n	8000d3a <trafficLight+0xc2>
				  flagRow = 0;
 8000cf8:	4b40      	ldr	r3, [pc, #256]	; (8000dfc <trafficLight+0x184>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
				  TIMER_ROW = RED_TIMER;
 8000cfe:	4b43      	ldr	r3, [pc, #268]	; (8000e0c <trafficLight+0x194>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a40      	ldr	r2, [pc, #256]	; (8000e04 <trafficLight+0x18c>)
 8000d04:	6013      	str	r3, [r2, #0]
			  }
			  break;
 8000d06:	e018      	b.n	8000d3a <trafficLight+0xc2>
		  case GREEN:
			  TIMER_ROW--;
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <trafficLight+0x18c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	4a3d      	ldr	r2, [pc, #244]	; (8000e04 <trafficLight+0x18c>)
 8000d10:	6013      	str	r3, [r2, #0]
			  displayRow7SEG(TIMER_ROW);
 8000d12:	4b3c      	ldr	r3, [pc, #240]	; (8000e04 <trafficLight+0x18c>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fea7 	bl	8000a6c <displayRow7SEG>
			  if(TIMER_ROW == 0){
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <trafficLight+0x18c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10b      	bne.n	8000d3e <trafficLight+0xc6>
				  flagRow = 1;
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <trafficLight+0x184>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
				  TIMER_ROW = YELLOW_TIMER;
 8000d2c:	4b38      	ldr	r3, [pc, #224]	; (8000e10 <trafficLight+0x198>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <trafficLight+0x18c>)
 8000d32:	6013      	str	r3, [r2, #0]
			  }
			  break;
 8000d34:	e003      	b.n	8000d3e <trafficLight+0xc6>
			  break;
 8000d36:	bf00      	nop
 8000d38:	e002      	b.n	8000d40 <trafficLight+0xc8>
			  break;
 8000d3a:	bf00      	nop
 8000d3c:	e000      	b.n	8000d40 <trafficLight+0xc8>
			  break;
 8000d3e:	bf00      	nop
		  }
		  switch(flagCol){
 8000d40:	4b2f      	ldr	r3, [pc, #188]	; (8000e00 <trafficLight+0x188>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d034      	beq.n	8000db2 <trafficLight+0x13a>
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	dc4e      	bgt.n	8000dea <trafficLight+0x172>
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <trafficLight+0xde>
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d017      	beq.n	8000d84 <trafficLight+0x10c>
 8000d54:	e049      	b.n	8000dea <trafficLight+0x172>
		  case RED:
			  TIMER_COL--;
 8000d56:	4b2f      	ldr	r3, [pc, #188]	; (8000e14 <trafficLight+0x19c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a2d      	ldr	r2, [pc, #180]	; (8000e14 <trafficLight+0x19c>)
 8000d5e:	6013      	str	r3, [r2, #0]
			  displayCol7SEG(TIMER_COL);
 8000d60:	4b2c      	ldr	r3, [pc, #176]	; (8000e14 <trafficLight+0x19c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff04 	bl	8000b74 <displayCol7SEG>
			  if(TIMER_COL == 0){
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <trafficLight+0x19c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d135      	bne.n	8000de0 <trafficLight+0x168>
				  flagCol = 2;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <trafficLight+0x188>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	601a      	str	r2, [r3, #0]
				  TIMER_COL = GREEN_TIMER;
 8000d7a:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <trafficLight+0x190>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <trafficLight+0x19c>)
 8000d80:	6013      	str	r3, [r2, #0]
			  }
			  break;
 8000d82:	e02d      	b.n	8000de0 <trafficLight+0x168>
		  case YELLOW:
			  TIMER_COL--;
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <trafficLight+0x19c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <trafficLight+0x19c>)
 8000d8c:	6013      	str	r3, [r2, #0]
			  displayCol7SEG(TIMER_COL);
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <trafficLight+0x19c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff feed 	bl	8000b74 <displayCol7SEG>
			  if(TIMER_COL == 0){
 8000d9a:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <trafficLight+0x19c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d120      	bne.n	8000de4 <trafficLight+0x16c>
				  flagCol = 0;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <trafficLight+0x188>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
				  TIMER_COL = RED_TIMER;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <trafficLight+0x194>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <trafficLight+0x19c>)
 8000dae:	6013      	str	r3, [r2, #0]
			  }
			  break;
 8000db0:	e018      	b.n	8000de4 <trafficLight+0x16c>
		  case GREEN:
			  TIMER_COL--;
 8000db2:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <trafficLight+0x19c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <trafficLight+0x19c>)
 8000dba:	6013      	str	r3, [r2, #0]
			  displayCol7SEG(TIMER_COL);
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <trafficLight+0x19c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fed6 	bl	8000b74 <displayCol7SEG>
			  if(TIMER_COL == 0){
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <trafficLight+0x19c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d10b      	bne.n	8000de8 <trafficLight+0x170>
				  flagCol = 1;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <trafficLight+0x188>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
				  TIMER_COL = YELLOW_TIMER;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <trafficLight+0x198>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <trafficLight+0x19c>)
 8000ddc:	6013      	str	r3, [r2, #0]
			  }
			  break;
 8000dde:	e003      	b.n	8000de8 <trafficLight+0x170>
			  break;
 8000de0:	bf00      	nop
 8000de2:	e002      	b.n	8000dea <trafficLight+0x172>
			  break;
 8000de4:	bf00      	nop
 8000de6:	e000      	b.n	8000dea <trafficLight+0x172>
			  break;
 8000de8:	bf00      	nop
		  }
		  setTimer0(500);
 8000dea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dee:	f7ff fcff 	bl	80007f0 <setTimer0>
	  }
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	20000094 	.word	0x20000094
 8000e00:	20000024 	.word	0x20000024
 8000e04:	20000010 	.word	0x20000010
 8000e08:	20000020 	.word	0x20000020
 8000e0c:	20000018 	.word	0x20000018
 8000e10:	2000001c 	.word	0x2000001c
 8000e14:	20000014 	.word	0x20000014

08000e18 <checkTimer>:
void checkTimer(){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
	if(RED_TIMER < (GREEN_TIMER + YELLOW_TIMER)){
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <checkTimer+0x78>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <checkTimer+0x7c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	441a      	add	r2, r3
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <checkTimer+0x80>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dd07      	ble.n	8000e40 <checkTimer+0x28>
		RED_TIMER = GREEN_TIMER + YELLOW_TIMER;
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <checkTimer+0x78>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <checkTimer+0x7c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a17      	ldr	r2, [pc, #92]	; (8000e98 <checkTimer+0x80>)
 8000e3c:	6013      	str	r3, [r2, #0]
		}
		if(temp == 1){
			GREEN_TIMER++;
		}
	}
}
 8000e3e:	e021      	b.n	8000e84 <checkTimer+0x6c>
		int temp = RED_TIMER - (GREEN_TIMER + YELLOW_TIMER);
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <checkTimer+0x80>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b12      	ldr	r3, [pc, #72]	; (8000e90 <checkTimer+0x78>)
 8000e46:	6819      	ldr	r1, [r3, #0]
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <checkTimer+0x7c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	440b      	add	r3, r1
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	607b      	str	r3, [r7, #4]
		while(temp > 2){
 8000e52:	e00c      	b.n	8000e6e <checkTimer+0x56>
			GREEN_TIMER += 2;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <checkTimer+0x78>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	3302      	adds	r3, #2
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <checkTimer+0x78>)
 8000e5c:	6013      	str	r3, [r2, #0]
			YELLOW_TIMER += 1;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <checkTimer+0x7c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <checkTimer+0x7c>)
 8000e66:	6013      	str	r3, [r2, #0]
			temp -= 3;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b03      	subs	r3, #3
 8000e6c:	607b      	str	r3, [r7, #4]
		while(temp > 2){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	dcef      	bgt.n	8000e54 <checkTimer+0x3c>
		if(temp == 1){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d104      	bne.n	8000e84 <checkTimer+0x6c>
			GREEN_TIMER++;
 8000e7a:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <checkTimer+0x78>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a03      	ldr	r2, [pc, #12]	; (8000e90 <checkTimer+0x78>)
 8000e82:	6013      	str	r3, [r2, #0]
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000020 	.word	0x20000020
 8000e94:	2000001c 	.word	0x2000001c
 8000e98:	20000018 	.word	0x20000018

08000e9c <displayMode>:
void displayMode(int mode){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	d821      	bhi.n	8000eee <displayMode+0x52>
 8000eaa:	a201      	add	r2, pc, #4	; (adr r2, 8000eb0 <displayMode+0x14>)
 8000eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb0:	08000ec1 	.word	0x08000ec1
 8000eb4:	08000ecb 	.word	0x08000ecb
 8000eb8:	08000ed7 	.word	0x08000ed7
 8000ebc:	08000ee3 	.word	0x08000ee3
	switch(mode){
	case MODE_FIRST:
		checkTimer();
 8000ec0:	f7ff ffaa 	bl	8000e18 <checkTimer>
		trafficLight();
 8000ec4:	f7ff fed8 	bl	8000c78 <trafficLight>
		break;
 8000ec8:	e012      	b.n	8000ef0 <displayMode+0x54>
	case MODE_SECOND:
		blinkRedLED();
 8000eca:	f7ff fd69 	bl	80009a0 <blinkRedLED>
		displayRow7SEG(MODE_SECOND + 1);
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fdcc 	bl	8000a6c <displayRow7SEG>
		break;
 8000ed4:	e00c      	b.n	8000ef0 <displayMode+0x54>
	case MODE_THIRD:
		blinkYellowLED();
 8000ed6:	f7ff fd85 	bl	80009e4 <blinkYellowLED>
		displayRow7SEG(MODE_THIRD + 1);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f7ff fdc6 	bl	8000a6c <displayRow7SEG>
		break;
 8000ee0:	e006      	b.n	8000ef0 <displayMode+0x54>
	case MODE_FOURTH:
		blinkGreenLED();
 8000ee2:	f7ff fda1 	bl	8000a28 <blinkGreenLED>
		displayRow7SEG(MODE_FOURTH + 1);
 8000ee6:	2004      	movs	r0, #4
 8000ee8:	f7ff fdc0 	bl	8000a6c <displayRow7SEG>
		break;
 8000eec:	e000      	b.n	8000ef0 <displayMode+0x54>
	default:
		break;
 8000eee:	bf00      	nop
	}
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <resetTraffic>:
void resetTraffic(){
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
	flagRow = 0;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <resetTraffic+0x28>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
	flagCol = 2;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <resetTraffic+0x2c>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	601a      	str	r2, [r3, #0]
	TIMER_ROW = RED_TIMER;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <resetTraffic+0x30>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <resetTraffic+0x34>)
 8000f0e:	6013      	str	r3, [r2, #0]
	TIMER_COL = GREEN_TIMER;
 8000f10:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <resetTraffic+0x38>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <resetTraffic+0x3c>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	20000094 	.word	0x20000094
 8000f24:	20000024 	.word	0x20000024
 8000f28:	20000018 	.word	0x20000018
 8000f2c:	20000010 	.word	0x20000010
 8000f30:	20000020 	.word	0x20000020
 8000f34:	20000014 	.word	0x20000014

08000f38 <setTimerRED>:
void setTimerRED(int timer){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	RED_TIMER = timer;
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <setTimerRED+0x1c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	resetTraffic();
 8000f46:	f7ff ffd7 	bl	8000ef8 <resetTraffic>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000018 	.word	0x20000018

08000f58 <setTimerYELLOW>:
void setTimerYELLOW(int timer){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	YELLOW_TIMER = timer;
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <setTimerYELLOW+0x1c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6013      	str	r3, [r2, #0]
	resetTraffic();
 8000f66:	f7ff ffc7 	bl	8000ef8 <resetTraffic>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000001c 	.word	0x2000001c

08000f78 <setTimerGREEN>:
void setTimerGREEN(int timer){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	GREEN_TIMER = timer;
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <setTimerGREEN+0x1c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
	resetTraffic();
 8000f86:	f7ff ffb7 	bl	8000ef8 <resetTraffic>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000020 	.word	0x20000020

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9c:	f000 f9d0 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa0:	f000 f816 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa4:	f000 f89c 	bl	80010e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000fa8:	f000 f84e 	bl	8001048 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <main+0x34>)
 8000fae:	f001 f93d 	bl	800222c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 8000fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fb6:	f000 fa25 	bl	8001404 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
	fsm_for_input_processing();
 8000fba:	f7ff f8f7 	bl	80001ac <fsm_for_input_processing>
	displayMode(getMode());
 8000fbe:	f7ff faf1 	bl	80005a4 <getMode>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff69 	bl	8000e9c <displayMode>
	fsm_for_input_processing();
 8000fca:	e7f6      	b.n	8000fba <main+0x22>
 8000fcc:	2000009c 	.word	0x2000009c

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b090      	sub	sp, #64	; 0x40
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 0318 	add.w	r3, r7, #24
 8000fda:	2228      	movs	r2, #40	; 0x28
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f001 fcdc 	bl	800299c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ffa:	2310      	movs	r3, #16
 8000ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001002:	f107 0318 	add.w	r3, r7, #24
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fcd8 	bl	80019bc <HAL_RCC_OscConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001012:	f000 f8c7 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001016:	230f      	movs	r3, #15
 8001018:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f000 ff44 	bl	8001ebc <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800103a:	f000 f8b3 	bl	80011a4 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3740      	adds	r7, #64	; 0x40
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	463b      	mov	r3, r7
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001064:	4b1d      	ldr	r3, [pc, #116]	; (80010dc <MX_TIM2_Init+0x94>)
 8001066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_TIM2_Init+0x94>)
 800106e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001072:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <MX_TIM2_Init+0x94>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_TIM2_Init+0x94>)
 800107c:	2209      	movs	r2, #9
 800107e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_TIM2_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <MX_TIM2_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <MX_TIM2_Init+0x94>)
 800108e:	f001 f87d 	bl	800218c <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001098:	f000 f884 	bl	80011a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800109c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_TIM2_Init+0x94>)
 80010aa:	f001 fa13 	bl	80024d4 <HAL_TIM_ConfigClockSource>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010b4:	f000 f876 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_TIM2_Init+0x94>)
 80010c6:	f001 fbdb 	bl	8002880 <HAL_TIMEx_MasterConfigSynchronization>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010d0:	f000 f868 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2000009c 	.word	0x2000009c

080010e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_GPIO_Init+0xb8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a27      	ldr	r2, [pc, #156]	; (8001198 <MX_GPIO_Init+0xb8>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b25      	ldr	r3, [pc, #148]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <MX_GPIO_Init+0xb8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a21      	ldr	r2, [pc, #132]	; (8001198 <MX_GPIO_Init+0xb8>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <MX_GPIO_Init+0xb8>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001124:	2200      	movs	r2, #0
 8001126:	f64f 717e 	movw	r1, #65406	; 0xff7e
 800112a:	481c      	ldr	r0, [pc, #112]	; (800119c <MX_GPIO_Init+0xbc>)
 800112c:	f000 fc2d 	bl	800198a <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_5
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 51ff 	mov.w	r1, #8160	; 0x1fe0
 8001136:	481a      	ldr	r0, [pc, #104]	; (80011a0 <MX_GPIO_Init+0xc0>)
 8001138:	f000 fc27 	bl	800198a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA8 PA9
                           PA10 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800113c:	f64f 737e 	movw	r3, #65406	; 0xff7e
 8001140:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	2301      	movs	r3, #1
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114a:	2302      	movs	r3, #2
 800114c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0308 	add.w	r3, r7, #8
 8001152:	4619      	mov	r1, r3
 8001154:	4811      	ldr	r0, [pc, #68]	; (800119c <MX_GPIO_Init+0xbc>)
 8001156:	f000 fa87 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800115a:	2307      	movs	r3, #7
 800115c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	4619      	mov	r1, r3
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <MX_GPIO_Init+0xc0>)
 800116e:	f000 fa7b 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_5
 8001172:	f44f 53ff 	mov.w	r3, #8160	; 0x1fe0
 8001176:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001178:	2301      	movs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2302      	movs	r3, #2
 8001182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	4619      	mov	r1, r3
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_GPIO_Init+0xc0>)
 800118c:	f000 fa6c 	bl	8001668 <HAL_GPIO_Init>

}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800
 80011a0:	40010c00 	.word	0x40010c00

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_MspInit+0x5c>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_MspInit+0x5c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6193      	str	r3, [r2, #24]
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_MspInit+0x5c>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x5c>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x5c>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x5c>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011e6:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <HAL_MspInit+0x60>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_MspInit+0x60>)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000

08001214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d113      	bne.n	800124e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	61d3      	str	r3, [r2, #28]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201c      	movs	r0, #28
 8001244:	f000 f9d9 	bl	80015fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001248:	201c      	movs	r0, #28
 800124a:	f000 f9f2 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	e7fe      	b.n	800126c <MemManage_Handler+0x4>

0800126e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001272:	e7fe      	b.n	8001272 <BusFault_Handler+0x4>

08001274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001278:	e7fe      	b.n	8001278 <UsageFault_Handler+0x4>

0800127a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001286:	b480      	push	{r7}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 f893 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <TIM2_IRQHandler+0x10>)
 80012b2:	f001 f807 	bl	80022c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000009c 	.word	0x2000009c

080012c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_reading.h"
#include "input_processing.h"
#include "led_display.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012dc:	d105      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 80012de:	f7ff f96b 	bl	80005b8 <button_reading>
		timer_run();
 80012e2:	f7ff fa9f 	bl	8000824 <timer_run>
		timer_run_proc();
 80012e6:	f7fe ff4b 	bl	8000180 <timer_run_proc>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	; (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	; (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131a:	f7ff ffd1 	bl	80012c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131e:	f001 fb19 	bl	8002954 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001322:	f7ff fe39 	bl	8000f98 <main>
  bx lr
 8001326:	4770      	bx	lr
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001330:	080029ec 	.word	0x080029ec
  ldr r2, =_sbss
 8001334:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001338:	200000e8 	.word	0x200000e8

0800133c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC1_2_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <HAL_Init+0x28>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <HAL_Init+0x28>)
 800134a:	f043 0310 	orr.w	r3, r3, #16
 800134e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001350:	2003      	movs	r0, #3
 8001352:	f000 f947 	bl	80015e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001356:	200f      	movs	r0, #15
 8001358:	f000 f808 	bl	800136c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800135c:	f7ff ff28 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40022000 	.word	0x40022000

0800136c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_InitTick+0x54>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x58>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f95f 	bl	800164e <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f000 f927 	bl	80015fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x5c>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000028 	.word	0x20000028
 80013c4:	20000030 	.word	0x20000030
 80013c8:	2000002c 	.word	0x2000002c

080013cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_IncTick+0x1c>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x20>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x20>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	20000030 	.word	0x20000030
 80013ec:	200000e4 	.word	0x200000e4

080013f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return uwTick;
 80013f4:	4b02      	ldr	r3, [pc, #8]	; (8001400 <HAL_GetTick+0x10>)
 80013f6:	681b      	ldr	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	200000e4 	.word	0x200000e4

08001404 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800140c:	f7ff fff0 	bl	80013f0 <HAL_GetTick>
 8001410:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800141c:	d005      	beq.n	800142a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_Delay+0x44>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	4413      	add	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800142a:	bf00      	nop
 800142c:	f7ff ffe0 	bl	80013f0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f7      	bhi.n	800142c <HAL_Delay+0x28>
  {
  }
}
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000030 	.word	0x20000030

0800144c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800145c:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001462:	68ba      	ldr	r2, [r7, #8]
 8001464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001468:	4013      	ands	r3, r2
 800146a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147e:	4a04      	ldr	r2, [pc, #16]	; (8001490 <__NVIC_SetPriorityGrouping+0x44>)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	60d3      	str	r3, [r2, #12]
}
 8001484:	bf00      	nop
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <__NVIC_GetPriorityGrouping+0x18>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	f003 0307 	and.w	r3, r3, #7
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	db0b      	blt.n	80014da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	f003 021f 	and.w	r2, r3, #31
 80014c8:	4906      	ldr	r1, [pc, #24]	; (80014e4 <__NVIC_EnableIRQ+0x34>)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	095b      	lsrs	r3, r3, #5
 80014d0:	2001      	movs	r0, #1
 80014d2:	fa00 f202 	lsl.w	r2, r0, r2
 80014d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	db0a      	blt.n	8001512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	490c      	ldr	r1, [pc, #48]	; (8001534 <__NVIC_SetPriority+0x4c>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	0112      	lsls	r2, r2, #4
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	440b      	add	r3, r1
 800150c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001510:	e00a      	b.n	8001528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4908      	ldr	r1, [pc, #32]	; (8001538 <__NVIC_SetPriority+0x50>)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	3b04      	subs	r3, #4
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	440b      	add	r3, r1
 8001526:	761a      	strb	r2, [r3, #24]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f1c3 0307 	rsb	r3, r3, #7
 8001556:	2b04      	cmp	r3, #4
 8001558:	bf28      	it	cs
 800155a:	2304      	movcs	r3, #4
 800155c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3304      	adds	r3, #4
 8001562:	2b06      	cmp	r3, #6
 8001564:	d902      	bls.n	800156c <NVIC_EncodePriority+0x30>
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	3b03      	subs	r3, #3
 800156a:	e000      	b.n	800156e <NVIC_EncodePriority+0x32>
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	f04f 32ff 	mov.w	r2, #4294967295
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	401a      	ands	r2, r3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001584:	f04f 31ff 	mov.w	r1, #4294967295
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	fa01 f303 	lsl.w	r3, r1, r3
 800158e:	43d9      	mvns	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001594:	4313      	orrs	r3, r2
         );
}
 8001596:	4618      	mov	r0, r3
 8001598:	3724      	adds	r7, #36	; 0x24
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr

080015a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015b0:	d301      	bcc.n	80015b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00f      	b.n	80015d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <SysTick_Config+0x40>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015be:	210f      	movs	r1, #15
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f7ff ff90 	bl	80014e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <SysTick_Config+0x40>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <SysTick_Config+0x40>)
 80015d0:	2207      	movs	r2, #7
 80015d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010

080015e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ff2d 	bl	800144c <__NVIC_SetPriorityGrouping>
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015fa:	b580      	push	{r7, lr}
 80015fc:	b086      	sub	sp, #24
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4603      	mov	r3, r0
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800160c:	f7ff ff42 	bl	8001494 <__NVIC_GetPriorityGrouping>
 8001610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	68b9      	ldr	r1, [r7, #8]
 8001616:	6978      	ldr	r0, [r7, #20]
 8001618:	f7ff ff90 	bl	800153c <NVIC_EncodePriority>
 800161c:	4602      	mov	r2, r0
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff5f 	bl	80014e8 <__NVIC_SetPriority>
}
 800162a:	bf00      	nop
 800162c:	3718      	adds	r7, #24
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	4603      	mov	r3, r0
 800163a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff35 	bl	80014b0 <__NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ffa2 	bl	80015a0 <SysTick_Config>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b08b      	sub	sp, #44	; 0x2c
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e148      	b.n	800190e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800167c:	2201      	movs	r2, #1
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4013      	ands	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	429a      	cmp	r2, r3
 8001696:	f040 8137 	bne.w	8001908 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4aa3      	ldr	r2, [pc, #652]	; (800192c <HAL_GPIO_Init+0x2c4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d05e      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016a4:	4aa1      	ldr	r2, [pc, #644]	; (800192c <HAL_GPIO_Init+0x2c4>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d875      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016aa:	4aa1      	ldr	r2, [pc, #644]	; (8001930 <HAL_GPIO_Init+0x2c8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d058      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016b0:	4a9f      	ldr	r2, [pc, #636]	; (8001930 <HAL_GPIO_Init+0x2c8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d86f      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016b6:	4a9f      	ldr	r2, [pc, #636]	; (8001934 <HAL_GPIO_Init+0x2cc>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d052      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016bc:	4a9d      	ldr	r2, [pc, #628]	; (8001934 <HAL_GPIO_Init+0x2cc>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d869      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016c2:	4a9d      	ldr	r2, [pc, #628]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04c      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016c8:	4a9b      	ldr	r2, [pc, #620]	; (8001938 <HAL_GPIO_Init+0x2d0>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d863      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016ce:	4a9b      	ldr	r2, [pc, #620]	; (800193c <HAL_GPIO_Init+0x2d4>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d046      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
 80016d4:	4a99      	ldr	r2, [pc, #612]	; (800193c <HAL_GPIO_Init+0x2d4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d85d      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016da:	2b12      	cmp	r3, #18
 80016dc:	d82a      	bhi.n	8001734 <HAL_GPIO_Init+0xcc>
 80016de:	2b12      	cmp	r3, #18
 80016e0:	d859      	bhi.n	8001796 <HAL_GPIO_Init+0x12e>
 80016e2:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <HAL_GPIO_Init+0x80>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	08001763 	.word	0x08001763
 80016ec:	0800173d 	.word	0x0800173d
 80016f0:	0800174f 	.word	0x0800174f
 80016f4:	08001791 	.word	0x08001791
 80016f8:	08001797 	.word	0x08001797
 80016fc:	08001797 	.word	0x08001797
 8001700:	08001797 	.word	0x08001797
 8001704:	08001797 	.word	0x08001797
 8001708:	08001797 	.word	0x08001797
 800170c:	08001797 	.word	0x08001797
 8001710:	08001797 	.word	0x08001797
 8001714:	08001797 	.word	0x08001797
 8001718:	08001797 	.word	0x08001797
 800171c:	08001797 	.word	0x08001797
 8001720:	08001797 	.word	0x08001797
 8001724:	08001797 	.word	0x08001797
 8001728:	08001797 	.word	0x08001797
 800172c:	08001745 	.word	0x08001745
 8001730:	08001759 	.word	0x08001759
 8001734:	4a82      	ldr	r2, [pc, #520]	; (8001940 <HAL_GPIO_Init+0x2d8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800173a:	e02c      	b.n	8001796 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	623b      	str	r3, [r7, #32]
          break;
 8001742:	e029      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	3304      	adds	r3, #4
 800174a:	623b      	str	r3, [r7, #32]
          break;
 800174c:	e024      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	3308      	adds	r3, #8
 8001754:	623b      	str	r3, [r7, #32]
          break;
 8001756:	e01f      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	330c      	adds	r3, #12
 800175e:	623b      	str	r3, [r7, #32]
          break;
 8001760:	e01a      	b.n	8001798 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800176a:	2304      	movs	r3, #4
 800176c:	623b      	str	r3, [r7, #32]
          break;
 800176e:	e013      	b.n	8001798 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d105      	bne.n	8001784 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001778:	2308      	movs	r3, #8
 800177a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	611a      	str	r2, [r3, #16]
          break;
 8001782:	e009      	b.n	8001798 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	615a      	str	r2, [r3, #20]
          break;
 800178e:	e003      	b.n	8001798 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x130>
          break;
 8001796:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2bff      	cmp	r3, #255	; 0xff
 800179c:	d801      	bhi.n	80017a2 <HAL_GPIO_Init+0x13a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	e001      	b.n	80017a6 <HAL_GPIO_Init+0x13e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	3304      	adds	r3, #4
 80017a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d802      	bhi.n	80017b4 <HAL_GPIO_Init+0x14c>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	e002      	b.n	80017ba <HAL_GPIO_Init+0x152>
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	3b08      	subs	r3, #8
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	210f      	movs	r1, #15
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	fa01 f303 	lsl.w	r3, r1, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	401a      	ands	r2, r3
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	431a      	orrs	r2, r3
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8090 	beq.w	8001908 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e8:	4b56      	ldr	r3, [pc, #344]	; (8001944 <HAL_GPIO_Init+0x2dc>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a55      	ldr	r2, [pc, #340]	; (8001944 <HAL_GPIO_Init+0x2dc>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_GPIO_Init+0x2dc>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001800:	4a51      	ldr	r2, [pc, #324]	; (8001948 <HAL_GPIO_Init+0x2e0>)
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	089b      	lsrs	r3, r3, #2
 8001806:	3302      	adds	r3, #2
 8001808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	220f      	movs	r2, #15
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43db      	mvns	r3, r3
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a49      	ldr	r2, [pc, #292]	; (800194c <HAL_GPIO_Init+0x2e4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d00d      	beq.n	8001848 <HAL_GPIO_Init+0x1e0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4a48      	ldr	r2, [pc, #288]	; (8001950 <HAL_GPIO_Init+0x2e8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <HAL_GPIO_Init+0x1dc>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a47      	ldr	r2, [pc, #284]	; (8001954 <HAL_GPIO_Init+0x2ec>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_GPIO_Init+0x1d8>
 800183c:	2302      	movs	r3, #2
 800183e:	e004      	b.n	800184a <HAL_GPIO_Init+0x1e2>
 8001840:	2303      	movs	r3, #3
 8001842:	e002      	b.n	800184a <HAL_GPIO_Init+0x1e2>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <HAL_GPIO_Init+0x1e2>
 8001848:	2300      	movs	r3, #0
 800184a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184c:	f002 0203 	and.w	r2, r2, #3
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	4093      	lsls	r3, r2
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800185a:	493b      	ldr	r1, [pc, #236]	; (8001948 <HAL_GPIO_Init+0x2e0>)
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	089b      	lsrs	r3, r3, #2
 8001860:	3302      	adds	r3, #2
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001874:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4937      	ldr	r1, [pc, #220]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	600b      	str	r3, [r1, #0]
 8001880:	e006      	b.n	8001890 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	43db      	mvns	r3, r3
 800188a:	4933      	ldr	r1, [pc, #204]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 800188c:	4013      	ands	r3, r2
 800188e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d006      	beq.n	80018aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	492d      	ldr	r1, [pc, #180]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018aa:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	4929      	ldr	r1, [pc, #164]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d006      	beq.n	80018d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	4923      	ldr	r1, [pc, #140]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
 80018d0:	e006      	b.n	80018e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	43db      	mvns	r3, r3
 80018da:	491f      	ldr	r1, [pc, #124]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018dc:	4013      	ands	r3, r2
 80018de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018ec:	4b1a      	ldr	r3, [pc, #104]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	4919      	ldr	r1, [pc, #100]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	60cb      	str	r3, [r1, #12]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4915      	ldr	r1, [pc, #84]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 8001904:	4013      	ands	r3, r2
 8001906:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	fa22 f303 	lsr.w	r3, r2, r3
 8001918:	2b00      	cmp	r3, #0
 800191a:	f47f aeaf 	bne.w	800167c <HAL_GPIO_Init+0x14>
  }
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	372c      	adds	r7, #44	; 0x2c
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	10320000 	.word	0x10320000
 8001930:	10310000 	.word	0x10310000
 8001934:	10220000 	.word	0x10220000
 8001938:	10210000 	.word	0x10210000
 800193c:	10120000 	.word	0x10120000
 8001940:	10110000 	.word	0x10110000
 8001944:	40021000 	.word	0x40021000
 8001948:	40010000 	.word	0x40010000
 800194c:	40010800 	.word	0x40010800
 8001950:	40010c00 	.word	0x40010c00
 8001954:	40011000 	.word	0x40011000
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	460b      	mov	r3, r1
 8001966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
 8001978:	e001      	b.n	800197e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	807b      	strh	r3, [r7, #2]
 8001996:	4613      	mov	r3, r2
 8001998:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800199a:	787b      	ldrb	r3, [r7, #1]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019a0:	887a      	ldrh	r2, [r7, #2]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	041a      	lsls	r2, r3, #16
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	611a      	str	r2, [r3, #16]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
	...

080019bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e26c      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f000 8087 	beq.w	8001aea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019dc:	4b92      	ldr	r3, [pc, #584]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d00c      	beq.n	8001a02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019e8:	4b8f      	ldr	r3, [pc, #572]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d112      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5e>
 80019f4:	4b8c      	ldr	r3, [pc, #560]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d10b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a02:	4b89      	ldr	r3, [pc, #548]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d06c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x12c>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d168      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e246      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a22:	d106      	bne.n	8001a32 <HAL_RCC_OscConfig+0x76>
 8001a24:	4b80      	ldr	r3, [pc, #512]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a7f      	ldr	r2, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	e02e      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0x98>
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a7a      	ldr	r2, [pc, #488]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e01d      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0xbc>
 8001a5e:	4b72      	ldr	r3, [pc, #456]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a71      	ldr	r2, [pc, #452]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b6f      	ldr	r3, [pc, #444]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a6e      	ldr	r2, [pc, #440]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e00b      	b.n	8001a90 <HAL_RCC_OscConfig+0xd4>
 8001a78:	4b6b      	ldr	r3, [pc, #428]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6a      	ldr	r2, [pc, #424]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	4b68      	ldr	r3, [pc, #416]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a67      	ldr	r2, [pc, #412]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d013      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fcaa 	bl	80013f0 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fca6 	bl	80013f0 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b64      	cmp	r3, #100	; 0x64
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1fa      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b5d      	ldr	r3, [pc, #372]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe4>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fc96 	bl	80013f0 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac8:	f7ff fc92 	bl	80013f0 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b64      	cmp	r3, #100	; 0x64
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1e6      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ada:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x10c>
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d063      	beq.n	8001bbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00b      	beq.n	8001b1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b02:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d11c      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
 8001b0e:	4b46      	ldr	r3, [pc, #280]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d116      	bne.n	8001b48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1a:	4b43      	ldr	r3, [pc, #268]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d005      	beq.n	8001b32 <HAL_RCC_OscConfig+0x176>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d001      	beq.n	8001b32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e1ba      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	00db      	lsls	r3, r3, #3
 8001b40:	4939      	ldr	r1, [pc, #228]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b46:	e03a      	b.n	8001bbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d020      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b50:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b52:	2201      	movs	r2, #1
 8001b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7ff fc4b 	bl	80013f0 <HAL_GetTick>
 8001b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fc47 	bl	80013f0 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e19b      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b70:	4b2d      	ldr	r3, [pc, #180]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0f0      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4927      	ldr	r1, [pc, #156]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	600b      	str	r3, [r1, #0]
 8001b90:	e015      	b.n	8001bbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_RCC_OscConfig+0x270>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b98:	f7ff fc2a 	bl	80013f0 <HAL_GetTick>
 8001b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9e:	e008      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba0:	f7ff fc26 	bl	80013f0 <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d901      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e17a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d03a      	beq.n	8001c40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d019      	beq.n	8001c06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd8:	f7ff fc0a 	bl	80013f0 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc06 	bl	80013f0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e15a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4b0d      	ldr	r3, [pc, #52]	; (8001c28 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f000 faa6 	bl	8002150 <RCC_Delay>
 8001c04:	e01c      	b.n	8001c40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <HAL_RCC_OscConfig+0x274>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff fbf0 	bl	80013f0 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c12:	e00f      	b.n	8001c34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff fbec 	bl	80013f0 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d908      	bls.n	8001c34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e140      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	42420000 	.word	0x42420000
 8001c30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b9e      	ldr	r3, [pc, #632]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e9      	bne.n	8001c14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80a6 	beq.w	8001d9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10d      	bne.n	8001c7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b94      	ldr	r3, [pc, #592]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	4a93      	ldr	r2, [pc, #588]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	61d3      	str	r3, [r2, #28]
 8001c6a:	4b91      	ldr	r3, [pc, #580]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c76:	2301      	movs	r3, #1
 8001c78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	4b8e      	ldr	r3, [pc, #568]	; (8001eb4 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d118      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c86:	4b8b      	ldr	r3, [pc, #556]	; (8001eb4 <HAL_RCC_OscConfig+0x4f8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a8a      	ldr	r2, [pc, #552]	; (8001eb4 <HAL_RCC_OscConfig+0x4f8>)
 8001c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c92:	f7ff fbad 	bl	80013f0 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9a:	f7ff fba9 	bl	80013f0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b64      	cmp	r3, #100	; 0x64
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e0fd      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cac:	4b81      	ldr	r3, [pc, #516]	; (8001eb4 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d106      	bne.n	8001cce <HAL_RCC_OscConfig+0x312>
 8001cc0:	4b7b      	ldr	r3, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e02d      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x334>
 8001cd6:	4b76      	ldr	r3, [pc, #472]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a75      	ldr	r2, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b73      	ldr	r3, [pc, #460]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a72      	ldr	r2, [pc, #456]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	e01c      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b05      	cmp	r3, #5
 8001cf6:	d10c      	bne.n	8001d12 <HAL_RCC_OscConfig+0x356>
 8001cf8:	4b6d      	ldr	r3, [pc, #436]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a6c      	ldr	r2, [pc, #432]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	f043 0304 	orr.w	r3, r3, #4
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	4a69      	ldr	r2, [pc, #420]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6213      	str	r3, [r2, #32]
 8001d10:	e00b      	b.n	8001d2a <HAL_RCC_OscConfig+0x36e>
 8001d12:	4b67      	ldr	r3, [pc, #412]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a66      	ldr	r2, [pc, #408]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	6213      	str	r3, [r2, #32]
 8001d1e:	4b64      	ldr	r3, [pc, #400]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	4a63      	ldr	r2, [pc, #396]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d015      	beq.n	8001d5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d32:	f7ff fb5d 	bl	80013f0 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fb59 	bl	80013f0 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e0ab      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	4b57      	ldr	r3, [pc, #348]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ee      	beq.n	8001d3a <HAL_RCC_OscConfig+0x37e>
 8001d5c:	e014      	b.n	8001d88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fb47 	bl	80013f0 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff fb43 	bl	80013f0 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e095      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7c:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1ee      	bne.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d88:	7dfb      	ldrb	r3, [r7, #23]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8e:	4b48      	ldr	r3, [pc, #288]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	4a47      	ldr	r2, [pc, #284]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8081 	beq.w	8001ea6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d061      	beq.n	8001e74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d146      	bne.n	8001e46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b3f      	ldr	r3, [pc, #252]	; (8001eb8 <HAL_RCC_OscConfig+0x4fc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fb17 	bl	80013f0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc6:	f7ff fb13 	bl	80013f0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e067      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	4b35      	ldr	r3, [pc, #212]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dec:	d108      	bne.n	8001e00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dee:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	492d      	ldr	r1, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a19      	ldr	r1, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	430b      	orrs	r3, r1
 8001e12:	4927      	ldr	r1, [pc, #156]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_OscConfig+0x4fc>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fae7 	bl	80013f0 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e26:	f7ff fae3 	bl	80013f0 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e037      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x46a>
 8001e44:	e02f      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <HAL_RCC_OscConfig+0x4fc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fad0 	bl	80013f0 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7ff facc 	bl	80013f0 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e020      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e66:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0x498>
 8001e72:	e018      	b.n	8001ea6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e013      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d106      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	42420060 	.word	0x42420060

08001ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0d0      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed0:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d910      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ede:	4b67      	ldr	r3, [pc, #412]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 0207 	bic.w	r2, r3, #7
 8001ee6:	4965      	ldr	r1, [pc, #404]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d040      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d115      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d109      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e073      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8a:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e06b      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4936      	ldr	r1, [pc, #216]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fac:	f7ff fa20 	bl	80013f0 <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7ff fa1c 	bl	80013f0 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e053      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d210      	bcs.n	800200c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fea:	4b24      	ldr	r3, [pc, #144]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	4922      	ldr	r1, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002026:	4313      	orrs	r3, r2
 8002028:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f821 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1c8>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1cc>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1d0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f97e 	bl	800136c <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000
 8002084:	080029d4 	.word	0x080029d4
 8002088:	20000028 	.word	0x20000028
 800208c:	2000002c 	.word	0x2000002c

08002090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b490      	push	{r4, r7}
 8002092:	b08a      	sub	sp, #40	; 0x28
 8002094:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002096:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002098:	1d3c      	adds	r4, r7, #4
 800209a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800209c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020a0:	f240 2301 	movw	r3, #513	; 0x201
 80020a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61fb      	str	r3, [r7, #28]
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d002      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x40>
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x46>
 80020ce:	e02d      	b.n	800212c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020d0:	4b1d      	ldr	r3, [pc, #116]	; (8002148 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d2:	623b      	str	r3, [r7, #32]
      break;
 80020d4:	e02d      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	0c9b      	lsrs	r3, r3, #18
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020e2:	4413      	add	r3, r2
 80020e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d013      	beq.n	800211c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	0c5b      	lsrs	r3, r3, #17
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002102:	4413      	add	r3, r2
 8002104:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002108:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4a0e      	ldr	r2, [pc, #56]	; (8002148 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210e:	fb02 f203 	mul.w	r2, r2, r3
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	fbb2 f3f3 	udiv	r3, r2, r3
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	e004      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	4a0b      	ldr	r2, [pc, #44]	; (800214c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002120:	fb02 f303 	mul.w	r3, r2, r3
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	623b      	str	r3, [r7, #32]
      break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212e:	623b      	str	r3, [r7, #32]
      break;
 8002130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002132:	6a3b      	ldr	r3, [r7, #32]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3728      	adds	r7, #40	; 0x28
 8002138:	46bd      	mov	sp, r7
 800213a:	bc90      	pop	{r4, r7}
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	080029c4 	.word	0x080029c4
 8002144:	40021000 	.word	0x40021000
 8002148:	007a1200 	.word	0x007a1200
 800214c:	003d0900 	.word	0x003d0900

08002150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002158:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <RCC_Delay+0x34>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <RCC_Delay+0x38>)
 800215e:	fba2 2303 	umull	r2, r3, r2, r3
 8002162:	0a5b      	lsrs	r3, r3, #9
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800216c:	bf00      	nop
  }
  while (Delay --);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	60fa      	str	r2, [r7, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f9      	bne.n	800216c <RCC_Delay+0x1c>
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr
 8002184:	20000028 	.word	0x20000028
 8002188:	10624dd3 	.word	0x10624dd3

0800218c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e041      	b.n	8002222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d106      	bne.n	80021b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff f82e 	bl	8001214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3304      	adds	r3, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4610      	mov	r0, r2
 80021cc:	f000 fa6a 	bl	80026a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d001      	beq.n	8002244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e035      	b.n	80022b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0201 	orr.w	r2, r2, #1
 800225a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a16      	ldr	r2, [pc, #88]	; (80022bc <HAL_TIM_Base_Start_IT+0x90>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d009      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x4e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800226e:	d004      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x4e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d111      	bne.n	800229e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b06      	cmp	r3, #6
 800228a:	d010      	beq.n	80022ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	e007      	b.n	80022ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40000400 	.word	0x40000400

080022c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d122      	bne.n	8002320 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d11b      	bne.n	8002320 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0202 	mvn.w	r2, #2
 80022f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2201      	movs	r2, #1
 80022f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f9b1 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 800230c:	e005      	b.n	800231a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f9a4 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f9b3 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d122      	bne.n	8002374 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b04      	cmp	r3, #4
 800233a:	d11b      	bne.n	8002374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f06f 0204 	mvn.w	r2, #4
 8002344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002356:	2b00      	cmp	r3, #0
 8002358:	d003      	beq.n	8002362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f987 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 8002360:	e005      	b.n	800236e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f97a 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 f989 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b08      	cmp	r3, #8
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b08      	cmp	r3, #8
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0208 	mvn.w	r2, #8
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2204      	movs	r2, #4
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f95d 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f950 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f95f 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d122      	bne.n	800241c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d11b      	bne.n	800241c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0210 	mvn.w	r2, #16
 80023ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2208      	movs	r2, #8
 80023f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	69db      	ldr	r3, [r3, #28]
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f933 	bl	800266e <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f926 	bl	800265c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f935 	bl	8002680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10e      	bne.n	8002448 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0201 	mvn.w	r2, #1
 8002440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe ff42 	bl	80012cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b80      	cmp	r3, #128	; 0x80
 8002454:	d10e      	bne.n	8002474 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002460:	2b80      	cmp	r3, #128	; 0x80
 8002462:	d107      	bne.n	8002474 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800246c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa67 	bl	8002942 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	2b40      	cmp	r3, #64	; 0x40
 8002480:	d10e      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248c:	2b40      	cmp	r3, #64	; 0x40
 800248e:	d107      	bne.n	80024a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8f9 	bl	8002692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d10e      	bne.n	80024cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d107      	bne.n	80024cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0220 	mvn.w	r2, #32
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa32 	bl	8002930 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_TIM_ConfigClockSource+0x18>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e0b3      	b.n	8002654 <HAL_TIM_ConfigClockSource+0x180>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800250a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002512:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002524:	d03e      	beq.n	80025a4 <HAL_TIM_ConfigClockSource+0xd0>
 8002526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800252a:	f200 8087 	bhi.w	800263c <HAL_TIM_ConfigClockSource+0x168>
 800252e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002532:	f000 8085 	beq.w	8002640 <HAL_TIM_ConfigClockSource+0x16c>
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	d87f      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b70      	cmp	r3, #112	; 0x70
 800253e:	d01a      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0xa2>
 8002540:	2b70      	cmp	r3, #112	; 0x70
 8002542:	d87b      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b60      	cmp	r3, #96	; 0x60
 8002546:	d050      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x116>
 8002548:	2b60      	cmp	r3, #96	; 0x60
 800254a:	d877      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b50      	cmp	r3, #80	; 0x50
 800254e:	d03c      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0xf6>
 8002550:	2b50      	cmp	r3, #80	; 0x50
 8002552:	d873      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b40      	cmp	r3, #64	; 0x40
 8002556:	d058      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x136>
 8002558:	2b40      	cmp	r3, #64	; 0x40
 800255a:	d86f      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b30      	cmp	r3, #48	; 0x30
 800255e:	d064      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
 8002560:	2b30      	cmp	r3, #48	; 0x30
 8002562:	d86b      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 8002564:	2b20      	cmp	r3, #32
 8002566:	d060      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
 8002568:	2b20      	cmp	r3, #32
 800256a:	d867      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x168>
 800256c:	2b00      	cmp	r3, #0
 800256e:	d05c      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
 8002570:	2b10      	cmp	r3, #16
 8002572:	d05a      	beq.n	800262a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002574:	e062      	b.n	800263c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6899      	ldr	r1, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f000 f95c 	bl	8002842 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002598:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
      break;
 80025a2:	e04e      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	6899      	ldr	r1, [r3, #8]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f000 f945 	bl	8002842 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c6:	609a      	str	r2, [r3, #8]
      break;
 80025c8:	e03b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 f8bc 	bl	8002754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2150      	movs	r1, #80	; 0x50
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f913 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 80025e8:	e02b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 f8da 	bl	80027b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2160      	movs	r1, #96	; 0x60
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f903 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002608:	e01b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6859      	ldr	r1, [r3, #4]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	461a      	mov	r2, r3
 8002618:	f000 f89c 	bl	8002754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2140      	movs	r1, #64	; 0x40
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8f3 	bl	800280e <TIM_ITRx_SetConfig>
      break;
 8002628:	e00b      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f000 f8ea 	bl	800280e <TIM_ITRx_SetConfig>
        break;
 800263a:	e002      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800263c:	bf00      	nop
 800263e:	e000      	b.n	8002642 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002640:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr

08002692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a25      	ldr	r2, [pc, #148]	; (800274c <TIM_Base_SetConfig+0xa8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d007      	beq.n	80026cc <TIM_Base_SetConfig+0x28>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c2:	d003      	beq.n	80026cc <TIM_Base_SetConfig+0x28>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a22      	ldr	r2, [pc, #136]	; (8002750 <TIM_Base_SetConfig+0xac>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d108      	bne.n	80026de <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	; (800274c <TIM_Base_SetConfig+0xa8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_Base_SetConfig+0x52>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d003      	beq.n	80026f6 <TIM_Base_SetConfig+0x52>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <TIM_Base_SetConfig+0xac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d108      	bne.n	8002708 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4313      	orrs	r3, r2
 8002706:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <TIM_Base_SetConfig+0xa8>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d103      	bne.n	800273c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	615a      	str	r2, [r3, #20]
}
 8002742:	bf00      	nop
 8002744:	3714      	adds	r7, #20
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400

08002754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	f023 0201 	bic.w	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f023 030a 	bic.w	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f023 0210 	bic.w	r2, r3, #16
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	031b      	lsls	r3, r3, #12
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	621a      	str	r2, [r3, #32]
}
 8002804:	bf00      	nop
 8002806:	371c      	adds	r7, #28
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	f043 0307 	orr.w	r3, r3, #7
 8002830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr

08002842 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002842:	b480      	push	{r7}
 8002844:	b087      	sub	sp, #28
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
 800284e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800285c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	021a      	lsls	r2, r3, #8
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	431a      	orrs	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	609a      	str	r2, [r3, #8]
}
 8002876:	bf00      	nop
 8002878:	371c      	adds	r7, #28
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002894:	2302      	movs	r3, #2
 8002896:	e041      	b.n	800291c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d009      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d004      	beq.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10c      	bne.n	800290a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40012c00 	.word	0x40012c00
 800292c:	40000400 	.word	0x40000400

08002930 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <__libc_init_array>:
 8002954:	b570      	push	{r4, r5, r6, lr}
 8002956:	2600      	movs	r6, #0
 8002958:	4d0c      	ldr	r5, [pc, #48]	; (800298c <__libc_init_array+0x38>)
 800295a:	4c0d      	ldr	r4, [pc, #52]	; (8002990 <__libc_init_array+0x3c>)
 800295c:	1b64      	subs	r4, r4, r5
 800295e:	10a4      	asrs	r4, r4, #2
 8002960:	42a6      	cmp	r6, r4
 8002962:	d109      	bne.n	8002978 <__libc_init_array+0x24>
 8002964:	f000 f822 	bl	80029ac <_init>
 8002968:	2600      	movs	r6, #0
 800296a:	4d0a      	ldr	r5, [pc, #40]	; (8002994 <__libc_init_array+0x40>)
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <__libc_init_array+0x44>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	42a6      	cmp	r6, r4
 8002974:	d105      	bne.n	8002982 <__libc_init_array+0x2e>
 8002976:	bd70      	pop	{r4, r5, r6, pc}
 8002978:	f855 3b04 	ldr.w	r3, [r5], #4
 800297c:	4798      	blx	r3
 800297e:	3601      	adds	r6, #1
 8002980:	e7ee      	b.n	8002960 <__libc_init_array+0xc>
 8002982:	f855 3b04 	ldr.w	r3, [r5], #4
 8002986:	4798      	blx	r3
 8002988:	3601      	adds	r6, #1
 800298a:	e7f2      	b.n	8002972 <__libc_init_array+0x1e>
 800298c:	080029e4 	.word	0x080029e4
 8002990:	080029e4 	.word	0x080029e4
 8002994:	080029e4 	.word	0x080029e4
 8002998:	080029e8 	.word	0x080029e8

0800299c <memset>:
 800299c:	4603      	mov	r3, r0
 800299e:	4402      	add	r2, r0
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d100      	bne.n	80029a6 <memset+0xa>
 80029a4:	4770      	bx	lr
 80029a6:	f803 1b01 	strb.w	r1, [r3], #1
 80029aa:	e7f9      	b.n	80029a0 <memset+0x4>

080029ac <_init>:
 80029ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ae:	bf00      	nop
 80029b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b2:	bc08      	pop	{r3}
 80029b4:	469e      	mov	lr, r3
 80029b6:	4770      	bx	lr

080029b8 <_fini>:
 80029b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ba:	bf00      	nop
 80029bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029be:	bc08      	pop	{r3}
 80029c0:	469e      	mov	lr, r3
 80029c2:	4770      	bx	lr
